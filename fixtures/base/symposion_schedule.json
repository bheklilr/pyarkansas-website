[
{
  "model": "symposion_schedule.schedule",
  "pk": 1,
  "fields": {
    "section": 1,
    "published": true,
    "hidden": false
  }
},
{
  "model": "symposion_schedule.schedule",
  "pk": 2,
  "fields": {
    "section": 2,
    "published": true,
    "hidden": false
  }
},
{
  "model": "symposion_schedule.day",
  "pk": 1,
  "fields": {
    "schedule": 1,
    "date": "2018-07-28"
  }
},
{
  "model": "symposion_schedule.day",
  "pk": 2,
  "fields": {
    "schedule": 1,
    "date": "2018-07-29"
  }
},
{
  "model": "symposion_schedule.day",
  "pk": 3,
  "fields": {
    "schedule": 2,
    "date": "2018-07-28"
  }
},
{
  "model": "symposion_schedule.day",
  "pk": 4,
  "fields": {
    "schedule": 2,
    "date": "2018-07-29"
  }
},
{
  "model": "symposion_schedule.room",
  "pk": 1,
  "fields": {
    "schedule": 1,
    "name": "Cartoon 1",
    "order": 2
  }
},
{
  "model": "symposion_schedule.room",
  "pk": 2,
  "fields": {
    "schedule": 1,
    "name": "Cartoon 2",
    "order": 2
  }
},
{
  "model": "symposion_schedule.room",
  "pk": 3,
  "fields": {
    "schedule": 1,
    "name": "Barbie Tootle",
    "order": 3
  }
},
{
  "model": "symposion_schedule.room",
  "pk": 4,
  "fields": {
    "schedule": 1,
    "name": "Hays Cape",
    "order": 4
  }
},
{
  "model": "symposion_schedule.room",
  "pk": 5,
  "fields": {
    "schedule": 2,
    "name": "Suzanne Scharer",
    "order": 5
  }
},
{
  "model": "symposion_schedule.slotkind",
  "pk": 1,
  "fields": {
    "schedule": 1,
    "label": "talk"
  }
},
{
  "model": "symposion_schedule.slotkind",
  "pk": 2,
  "fields": {
    "schedule": 1,
    "label": "tutorial"
  }
},
{
  "model": "symposion_schedule.slotkind",
  "pk": 3,
  "fields": {
    "schedule": 1,
    "label": "break"
  }
},
{
  "model": "symposion_schedule.slotkind",
  "pk": 4,
  "fields": {
    "schedule": 1,
    "label": "keynote"
  }
},
{
  "model": "symposion_schedule.slotkind",
  "pk": 5,
  "fields": {
    "schedule": 1,
    "label": "plenary"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 1,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) tutorial (10:30:00 - 12:30:00) Suzanne Scharer",
    "day": 1,
    "kind": 2,
    "start": "10:30:00",
    "end": "12:30:00",
    "content_override": "",
    "content_override_html": ""
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 2,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) tutorial (15:00:00 - 17:00:00) Suzanne Scharer",
    "day": 1,
    "kind": 2,
    "start": "15:00:00",
    "end": "17:00:00",
    "content_override": "",
    "content_override_html": ""
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 3,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) break (14:00:00 - 15:00:00) Suzanne Scharer",
    "day": 1,
    "kind": 3,
    "start": "14:00:00",
    "end": "15:00:00",
    "content_override": "Break",
    "content_override_html": "<p>Break</p>"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 4,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) break (10:00:00 - 10:30:00) Cartoon 1 Cartoon 2 Barbie Tootle Hays Cape Suzanne Scharer",
    "day": 1,
    "kind": 3,
    "start": "10:00:00",
    "end": "10:30:00",
    "content_override": "Break",
    "content_override_html": "<p>Break</p>"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 5,
  "fields": {
    "name": "2018-07-29 (PyArkansas 2018 Talks Schedule) tutorial (12:45:00 - 14:45:00) Suzanne Scharer",
    "day": 2,
    "kind": 2,
    "start": "12:45:00",
    "end": "14:45:00",
    "content_override": "",
    "content_override_html": ""
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 6,
  "fields": {
    "name": "2018-07-29 (PyArkansas 2018 Talks Schedule) tutorial (15:00:00 - 17:00:00) Suzanne Scharer",
    "day": 2,
    "kind": 2,
    "start": "15:00:00",
    "end": "17:00:00",
    "content_override": "",
    "content_override_html": ""
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 7,
  "fields": {
    "name": "2018-07-29 (PyArkansas 2018 Talks Schedule) break (14:45:00 - 15:00:00) Suzanne Scharer",
    "day": 2,
    "kind": 3,
    "start": "14:45:00",
    "end": "15:00:00",
    "content_override": "Break",
    "content_override_html": "<p>Break</p>"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 8,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) plenary (09:00:00 - 09:15:00) ",
    "day": 1,
    "kind": 5,
    "start": "09:00:00",
    "end": "09:15:00",
    "content_override": "Opening Remarks",
    "content_override_html": "<p>Opening Remarks</p>"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 9,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) keynote (09:15:00 - 10:00:00) ",
    "day": 1,
    "kind": 4,
    "start": "09:15:00",
    "end": "10:00:00",
    "content_override": "Saturday Keynote",
    "content_override_html": "<p>Saturday Keynote</p>"
  }
},
{
  "model": "symposion_schedule.slot",
  "pk": 10,
  "fields": {
    "name": "2018-07-28 (PyArkansas 2018 Talks Schedule) break (12:30:00 - 14:00:00) Cartoon 1 Cartoon 2 Barbie Tootle Hays Cape Suzanne Scharer",
    "day": 1,
    "kind": 3,
    "start": "12:30:00",
    "end": "14:00:00",
    "content_override": "Lunch Break",
    "content_override_html": "<p>Lunch Break</p>"
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 1,
  "fields": {
    "slot": 1,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 2,
  "fields": {
    "slot": 2,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 3,
  "fields": {
    "slot": 3,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 4,
  "fields": {
    "slot": 4,
    "room": 1
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 5,
  "fields": {
    "slot": 4,
    "room": 2
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 6,
  "fields": {
    "slot": 4,
    "room": 3
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 7,
  "fields": {
    "slot": 4,
    "room": 4
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 8,
  "fields": {
    "slot": 5,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 9,
  "fields": {
    "slot": 6,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 10,
  "fields": {
    "slot": 7,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 11,
  "fields": {
    "slot": 8,
    "room": 1
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 12,
  "fields": {
    "slot": 8,
    "room": 2
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 13,
  "fields": {
    "slot": 9,
    "room": 1
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 14,
  "fields": {
    "slot": 9,
    "room": 2
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 15,
  "fields": {
    "slot": 4,
    "room": 5
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 16,
  "fields": {
    "slot": 10,
    "room": 1
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 17,
  "fields": {
    "slot": 10,
    "room": 2
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 18,
  "fields": {
    "slot": 10,
    "room": 3
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 19,
  "fields": {
    "slot": 10,
    "room": 4
  }
},
{
  "model": "symposion_schedule.slotroom",
  "pk": 20,
  "fields": {
    "slot": 10,
    "room": 5
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 1,
  "fields": {
    "slot": null,
    "title": "A Son, a Father, and a Computer - How I'm using tech to ease the suffering of my dying father.",
    "description": "My father is dying. He has ALS (Amyotrophic Lateral Sclerosis), of which there is no cure. Feeling powerless in the face of disease, I set out to do what I could: Build tech to ease his suffering, to help him feel more connected with his loved ones, and to share what I'm building for free. This is my story.",
    "description_html": "<p>My father is dying. He has ALS (Amyotrophic Lateral Sclerosis), of which there is no cure. Feeling powerless in the face of disease, I set out to do what I could: Build tech to ease his suffering, to help him feel more connected with his loved ones, and to share what I'm building for free. This is my story.</p>",
    "abstract": "*WIP*\r\n\r\nUsing Python, I built:\r\n\r\n* An Emergency notification system that texts family members.\r\n* A \"help button\" where a mother who *never* asks for help can simply push it, and her closest friends will get a reminder to call and encourage her.\r\n* A python-powered, Voice-activated IR system to turn on music, tv, and more. Engaged with custom wake words, and powered by a Raspberry Pi.\r\n* A music player that will allow my dad to listen to his favorite music when he's feeling down, without having to push a single button.",
    "abstract_html": "<p><em>WIP</em></p>\n<p>Using Python, I built:</p>\n<ul>\n<li>An Emergency notification system that texts family members.</li>\n<li>A \"help button\" where a mother who <em>never</em> asks for help can simply push it, and her closest friends will get a reminder to call and encourage her.</li>\n<li>A python-powered, Voice-activated IR system to turn on music, tv, and more. Engaged with custom wake words, and powered by a Raspberry Pi.</li>\n<li>A music player that will allow my dad to listen to his favorite music when he's feeling down, without having to push a single button.</li>\n</ul>",
    "speaker": 63,
    "cancelled": false,
    "proposal_base": 68,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 2,
  "fields": {
    "slot": null,
    "title": "Bit Splotches: Dot Matrix Printing with Python",
    "description": "Earlier this year, in the spring of 2018, I bought a printer made in the late 80's in the parking lot of a Rax Roast Beef restaurant for $20. This started a nostalgic journey assisted by NumPy matrix slices and a can of WD-40. This talk will cover how I used Python to overcome three decades of history to get it printing again.",
    "description_html": "<p>Earlier this year, in the spring of 2018, I bought a printer made in the late 80's in the parking lot of a Rax Roast Beef restaurant for $20. This started a nostalgic journey assisted by NumPy matrix slices and a can of WD-40. This talk will cover how I used Python to overcome three decades of history to get it printing again.</p>",
    "abstract": "- Brief history of consumer printing in the late 80's\r\n    - Dot Matrix\r\n    - Epson \"Compatible\" and not\r\n    - Parallel and Serial Interfaces\r\n    - Rejuvenating ribbons with WD-40\r\n- Interfacing with the device over USB\r\n- Trying (and failing) with available printer drivers\r\n- Being lucky and having the manual for the printer\r\n- NetPBM (a textual bit representation of images)\r\n- Dithering with GIMP, ImageMagick, and Pillow\r\n- Mapping printer pins to NumPy matrices\r\n- Python integration with CUPS using Tea4CUPS\r\n- Custom fonts using NumPy and the Read-Font library (ported to Python 3)\r\n- Demo and Examples",
    "abstract_html": "<ul>\n<li>Brief history of consumer printing in the late 80's<ul>\n<li>Dot Matrix</li>\n<li>Epson \"Compatible\" and not</li>\n<li>Parallel and Serial Interfaces</li>\n<li>Rejuvenating ribbons with WD-40</li>\n</ul>\n</li>\n<li>Interfacing with the device over USB</li>\n<li>Trying (and failing) with available printer drivers</li>\n<li>Being lucky and having the manual for the printer</li>\n<li>NetPBM (a textual bit representation of images)</li>\n<li>Dithering with GIMP, ImageMagick, and Pillow</li>\n<li>Mapping printer pins to NumPy matrices</li>\n<li>Python integration with CUPS using Tea4CUPS</li>\n<li>Custom fonts using NumPy and the Read-Font library (ported to Python 3)</li>\n<li>Demo and Examples</li>\n</ul>",
    "speaker": 114,
    "cancelled": false,
    "proposal_base": 116,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 3,
  "fields": {
    "slot": null,
    "title": "Give Feedback Fearlessly",
    "description": "Constructive feedback can be difficult to receive gracefully and even harder to give effectively. In this session, we\u2019ll discuss why peer-to-peer feedback is necessary for a healthy team dynamic, introduce techniques for sharing feedback with team members, and work through example scenarios.",
    "description_html": "<p>Constructive feedback can be difficult to receive gracefully and even harder to give effectively. In this session, we\u2019ll discuss why peer-to-peer feedback is necessary for a healthy team dynamic, introduce techniques for sharing feedback with team members, and work through example scenarios.</p>",
    "abstract": "For many of us, it\u2019s hard to speak up when we notice our teammates struggling. We don\u2019t want to hurt anyone\u2019s feelings or make things awkward. Sometimes it just feels like too much work to organize our thoughts into a coherent message that could help someone who\u2019s falling behind move forward. Even knowing when it\u2019s time to draw attention to a problem can be challenging.\r\n\r\nWe\u2019ll start the session by covering our bases. When should we address uncomfortable situations at work? How can we keep personal feelings from derailing the conversation? And what happens afterward? Can we evaluate the effectiveness of our feedback? How can we move forward, growing as a team? We\u2019ll answer these questions as we begin to build the skills necessary to provide teammates with specific, actionable feedback.\r\n\r\nFrom there, the remainder of the time will be spent in hands-on role-playing scenarios. Participants will be broken up into small groups and given several scenarios to work through. Each scenario will outline a challenging situation from multiple points of view to help participants further explore the techniques and principles covered in the lecture portion of the session.",
    "abstract_html": "<p>For many of us, it\u2019s hard to speak up when we notice our teammates struggling. We don\u2019t want to hurt anyone\u2019s feelings or make things awkward. Sometimes it just feels like too much work to organize our thoughts into a coherent message that could help someone who\u2019s falling behind move forward. Even knowing when it\u2019s time to draw attention to a problem can be challenging.</p>\n<p>We\u2019ll start the session by covering our bases. When should we address uncomfortable situations at work? How can we keep personal feelings from derailing the conversation? And what happens afterward? Can we evaluate the effectiveness of our feedback? How can we move forward, growing as a team? We\u2019ll answer these questions as we begin to build the skills necessary to provide teammates with specific, actionable feedback.</p>\n<p>From there, the remainder of the time will be spent in hands-on role-playing scenarios. Participants will be broken up into small groups and given several scenarios to work through. Each scenario will outline a challenging situation from multiple points of view to help participants further explore the techniques and principles covered in the lecture portion of the session.</p>",
    "speaker": 49,
    "cancelled": false,
    "proposal_base": 41,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 4,
  "fields": {
    "slot": null,
    "title": "How to Build a Plan to Migrate to Python 3",
    "description": "Python 2 will no longer be supported past 2020, yet many organizations still haven't made the switch to Python 3. This talk is for anyone facing a 2-to-3 migration that they'd like to feel more confident about. Attendees will leave with the outline of a migration plan, some suggested focus areas, a knowledge of helpful tools, and links to resources they can use after the talk.",
    "description_html": "<p>Python 2 will no longer be supported past 2020, yet many organizations still haven't made the switch to Python 3. This talk is for anyone facing a 2-to-3 migration that they'd like to feel more confident about. Attendees will leave with the outline of a migration plan, some suggested focus areas, a knowledge of helpful tools, and links to resources they can use after the talk.</p>",
    "abstract": "Many organizations haven't yet made the switch to Python 3. Time is running out for them since **Python 2 will no longer be supported past 2020**. Organizations with larger projects to migrate will need to start very soon in order to meet the deadline.\r\n\r\nMigrating from 2 to 3 can seem overwhelming, but it doesn't have to be if you **make a plan, take it step by step, and use the right tools**. What's more, there's a great deal you can do immediately (while still in Python 2) to make your code more compatible with Python 3.\r\n\r\n**This talk is for anyone facing a 2-to-3 migration that they'd like to feel more confident about.** The talk will discuss five areas of focus -- choosing a Python 3 version, identifying test gaps, reviewing dependencies, prepping one's code for Python 3, and the actual switchover. I'll discuss strengths and weaknesses of the tool `caniusepython3` for assessing dependencies. I'll also go into a fair amount of detail on Python's tool `2to3`, including how (and when) to use it effectively.\r\n\r\n**Attendees will leave confident that the migration is manageable.** They'll have the outline of a plan, some specific areas on which to focus, a knowledge of helpful tools, and links to resources they can use after the talk.",
    "abstract_html": "<p>Many organizations haven't yet made the switch to Python 3. Time is running out for them since <strong>Python 2 will no longer be supported past 2020</strong>. Organizations with larger projects to migrate will need to start very soon in order to meet the deadline.</p>\n<p>Migrating from 2 to 3 can seem overwhelming, but it doesn't have to be if you <strong>make a plan, take it step by step, and use the right tools</strong>. What's more, there's a great deal you can do immediately (while still in Python 2) to make your code more compatible with Python 3.</p>\n<p><strong>This talk is for anyone facing a 2-to-3 migration that they'd like to feel more confident about.</strong> The talk will discuss five areas of focus -- choosing a Python 3 version, identifying test gaps, reviewing dependencies, prepping one's code for Python 3, and the actual switchover. I'll discuss strengths and weaknesses of the tool <code>caniusepython3</code> for assessing dependencies. I'll also go into a fair amount of detail on Python's tool <code>2to3</code>, including how (and when) to use it effectively.</p>\n<p><strong>Attendees will leave confident that the migration is manageable.</strong> They'll have the outline of a plan, some specific areas on which to focus, a knowledge of helpful tools, and links to resources they can use after the talk.</p>",
    "speaker": 55,
    "cancelled": false,
    "proposal_base": 55,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 5,
  "fields": {
    "slot": null,
    "title": "Distributed Software (with Python)",
    "description": "A whirlwind tour of several aspects of distributed software design with examples and use cases tailored to Python development. Topics include code layout, serialization, networking, and more.",
    "description_html": "<p>A whirlwind tour of several aspects of distributed software design with examples and use cases tailored to Python development. Topics include code layout, serialization, networking, and more.</p>",
    "abstract": "This talk gives an introduction to several aspects of designing and implementing distributed software with a focus on control systems and Python development. Topics include code layout, server architecture, serialization, APIs, networking, and control system design. Relevant tradeoffs, external libraries, and implementation details for one variant are covered for each topic with Python specific example code. A few minutes are set aside at the end of the talk to ask specific questions and discuss Python specific implementation details.\r\n\r\n* About the author (2m)\r\n* About the example project (3m)\r\n* Code Layout (5m)\r\n* (Extended) Server Architecture (5m)\r\n* Serialization (7m)\r\n    * Versioning\r\n    * Binary Data\r\n    * Bandwidth\r\n    * Speed\r\n* Component APIs (5m)\r\n* Network IO (3m)\r\n* Network Discovery (5m)\r\n* (Extended) Control System Design (5m)\r\n* Questions and Links (5-10m)",
    "abstract_html": "<p>This talk gives an introduction to several aspects of designing and implementing distributed software with a focus on control systems and Python development. Topics include code layout, server architecture, serialization, APIs, networking, and control system design. Relevant tradeoffs, external libraries, and implementation details for one variant are covered for each topic with Python specific example code. A few minutes are set aside at the end of the talk to ask specific questions and discuss Python specific implementation details.</p>\n<ul>\n<li>About the author (2m)</li>\n<li>About the example project (3m)</li>\n<li>Code Layout (5m)</li>\n<li>(Extended) Server Architecture (5m)</li>\n<li>Serialization (7m)<ul>\n<li>Versioning</li>\n<li>Binary Data</li>\n<li>Bandwidth</li>\n<li>Speed</li>\n</ul>\n</li>\n<li>Component APIs (5m)</li>\n<li>Network IO (3m)</li>\n<li>Network Discovery (5m)</li>\n<li>(Extended) Control System Design (5m)</li>\n<li>Questions and Links (5-10m)</li>\n</ul>",
    "speaker": 71,
    "cancelled": false,
    "proposal_base": 71,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 6,
  "fields": {
    "slot": null,
    "title": "Useful Python Libraries for Network Engineers",
    "description": "Python has quickly become THE language for network automation and programmability due to it\u2019s combined simplicity and power. If you are a network engineer looking to get started with automation and Python, it can be tough to now where to start.  This session proposes the modules and libraries every engineer should have in their tool bag.",
    "description_html": "<p>Python has quickly become THE language for network automation and programmability due to it\u2019s combined simplicity and power. If you are a network engineer looking to get started with automation and Python, it can be tough to now where to start.  This session proposes the modules and libraries every engineer should have in their tool bag.</p>",
    "abstract": "Python has quickly become THE language for network automation and programmability due to it\u2019s combined simplicity and power.  Add to that the robust assortment of tools, libraries and modules related to networking available to \u201cimport\" and I doubt another language will take over the title anytime soon.  In this session we\u2019ll explore some of the most useful libraries for network engineers and developers looking to interact with the network from a configuration and operational perspective.  Plenty of code will be shown, and all examples will be available to take away and leverage in your own environments.  \r\n\r\nThrough the session you'll learn how to leverage the tried and true interfaces of CLI and SNMP to manage your network before we jump up to newer options like NETCONF, RESTCONF and REST APIs.  We'll even explore full configuration management solutions and discuss when and how they should fit into your overall automation strategy.  \r\n\r\nSome of the great modules that will be covered include: \r\n\r\n* netmiko\r\n* PySNMP\r\n* ncclient\r\n* requests \r\n* Ansible \r\n* NAPALM",
    "abstract_html": "<p>Python has quickly become THE language for network automation and programmability due to it\u2019s combined simplicity and power.  Add to that the robust assortment of tools, libraries and modules related to networking available to \u201cimport\" and I doubt another language will take over the title anytime soon.  In this session we\u2019ll explore some of the most useful libraries for network engineers and developers looking to interact with the network from a configuration and operational perspective.  Plenty of code will be shown, and all examples will be available to take away and leverage in your own environments.  </p>\n<p>Through the session you'll learn how to leverage the tried and true interfaces of CLI and SNMP to manage your network before we jump up to newer options like NETCONF, RESTCONF and REST APIs.  We'll even explore full configuration management solutions and discuss when and how they should fit into your overall automation strategy.  </p>\n<p>Some of the great modules that will be covered include: </p>\n<ul>\n<li>netmiko</li>\n<li>PySNMP</li>\n<li>ncclient</li>\n<li>requests </li>\n<li>Ansible </li>\n<li>NAPALM</li>\n</ul>",
    "speaker": 98,
    "cancelled": false,
    "proposal_base": 94,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 7,
  "fields": {
    "slot": null,
    "title": "Making Games",
    "description": "Games make an excellent hack space for learning computer science topics, but they have their own language you\u2019ll want to learn. Learn what an application loop is and how they look in practice. Get a crash course in 2d computer graphics. See a handful of examples of how to build games with multiple transitions. See a handful of anti-patterns. Get a quick summary of the game libraries.",
    "description_html": "<p>Games make an excellent hack space for learning computer science topics, but they have their own language you\u2019ll want to learn. Learn what an application loop is and how they look in practice. Get a crash course in 2d computer graphics. See a handful of examples of how to build games with multiple transitions. See a handful of anti-patterns. Get a quick summary of the game libraries.</p>",
    "abstract": "1. Game Loops\r\n    1. Anatomy of a long running process\r\n    2. The Most Basic Loop\r\n        1. Respond to events\r\n        2. Update Simulation\r\n        3. Draw the model\r\n2. 2D Graphics\r\n    1. The pixel grid\r\n    2. Separation of draw space and simulation space\r\n3. Constructing your game\r\n    1. The simplest\r\n    2. Loops in loops\r\n    3. Scenes\r\n4. Engine Design\r\n    1. procedural loops\r\n    2. Entity-Component-System\r\n    3. Model-View-Controller\r\n5. Libraries\r\n    1. Pygame\r\n    2. Arcade\r\n    3. PursuedPyBear",
    "abstract_html": "<ol>\n<li>Game Loops<ol>\n<li>Anatomy of a long running process</li>\n<li>The Most Basic Loop<ol>\n<li>Respond to events</li>\n<li>Update Simulation</li>\n<li>Draw the model</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>2D Graphics<ol>\n<li>The pixel grid</li>\n<li>Separation of draw space and simulation space</li>\n</ol>\n</li>\n<li>Constructing your game<ol>\n<li>The simplest</li>\n<li>Loops in loops</li>\n<li>Scenes</li>\n</ol>\n</li>\n<li>Engine Design<ol>\n<li>procedural loops</li>\n<li>Entity-Component-System</li>\n<li>Model-View-Controller</li>\n</ol>\n</li>\n<li>Libraries<ol>\n<li>Pygame</li>\n<li>Arcade</li>\n<li>PursuedPyBear</li>\n</ol>\n</li>\n</ol>",
    "speaker": 100,
    "cancelled": false,
    "proposal_base": 98,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 8,
  "fields": {
    "slot": null,
    "title": "Software Engineering For Beginners: A Jr. Developer's Guide",
    "description": "Speaking English alone won't make you a journalist or author. The same is true of Python and becoming a professional developer or open source contributor. Many people are 'learning to code' to switch careers, but overlooking the other skills they'll need. This talk, aimed at new/potential developers, highlights the when, why, and how of those other skills.",
    "description_html": "<p>Speaking English alone won't make you a journalist or author. The same is true of Python and becoming a professional developer or open source contributor. Many people are 'learning to code' to switch careers, but overlooking the other skills they'll need. This talk, aimed at new/potential developers, highlights the when, why, and how of those other skills.</p>",
    "abstract": "# An Outline of the Talk\r\n\r\n# Version Control (Git)\r\n-  Why\r\n    *  Protect yourself from mistakes\r\n    *  Enable yourself to take chances & try new things\r\n    *  Learning to work w/ a team\r\n\r\n#  When?\r\n*  10 or more lines of working code that you're scared to change because it might break\r\n\r\n#  What/How\r\n*  Basic feature branch/merge workflow\r\n\r\n#  Reference: Pro Git Chapters [1-3](https://git-scm.com/book/en/v2)\r\n\r\n# Documentation\r\n\r\n#  In Code vs About Code: Start w/ In Code\r\n\r\n#  Why\r\n*  Help your future self\r\n*  Help your teammates help you\r\n*  Avoid that form of technical debt\r\n\r\n#  When\r\n*  Writing code using a new technique\r\n*  Writing functions, especially if they call other functions \r\n\r\n#  How\r\n*  Docstrings for functions (minimums)\r\n    -  What the function does\r\n    -  What it takes as input (include data type)\r\n    -  What it produces as output (include data type)\r\n\r\n#  Next Step: Learn about ReStructured Text and/or Sphinx for general documentation\r\n\r\n# Testing & TDD\r\n##  Testing vs \"PURE\" TDD\r\n##  Why\r\n*  Tests protect you from future changes breaking things\r\n*  TDD: \"write tests first\" forces you to think before you type\r\n\r\n##  When\r\n*  As soon as possible\r\n*  Art + Science: experience helps\r\n\r\n##  How\r\n*  New coders: Python unittest and doctests\r\n*  Experienced coders: pytest\r\n\r\n##  Next Step\r\n*  New coders: pytest\r\n*  Experienced coders: Continuous Integration\r\n\r\n# Other\r\n##  Dependency Management/Deployment\r\n*  VMs\r\n*  Containers\r\n*  Virtual Env\r\n\r\n##  Development Environment\r\n*  CLI vs. GUI\r\n*  Linux/Unix/Windows/OS X",
    "abstract_html": "<h1>An Outline of the Talk</h1>\n<h1>Version Control (Git)</h1>\n<ul>\n<li>Why<ul>\n<li>Protect yourself from mistakes</li>\n<li>Enable yourself to take chances &amp; try new things</li>\n<li>Learning to work w/ a team</li>\n</ul>\n</li>\n</ul>\n<h1>When?</h1>\n<ul>\n<li>10 or more lines of working code that you're scared to change because it might break</li>\n</ul>\n<h1>What/How</h1>\n<ul>\n<li>Basic feature branch/merge workflow</li>\n</ul>\n<h1>Reference: Pro Git Chapters <a href=\"https://git-scm.com/book/en/v2\">1-3</a></h1>\n<h1>Documentation</h1>\n<h1>In Code vs About Code: Start w/ In Code</h1>\n<h1>Why</h1>\n<ul>\n<li>Help your future self</li>\n<li>Help your teammates help you</li>\n<li>Avoid that form of technical debt</li>\n</ul>\n<h1>When</h1>\n<ul>\n<li>Writing code using a new technique</li>\n<li>Writing functions, especially if they call other functions </li>\n</ul>\n<h1>How</h1>\n<ul>\n<li>Docstrings for functions (minimums)<ul>\n<li>What the function does</li>\n<li>What it takes as input (include data type)</li>\n<li>What it produces as output (include data type)</li>\n</ul>\n</li>\n</ul>\n<h1>Next Step: Learn about ReStructured Text and/or Sphinx for general documentation</h1>\n<h1>Testing &amp; TDD</h1>\n<h2>Testing vs \"PURE\" TDD</h2>\n<h2>Why</h2>\n<ul>\n<li>Tests protect you from future changes breaking things</li>\n<li>TDD: \"write tests first\" forces you to think before you type</li>\n</ul>\n<h2>When</h2>\n<ul>\n<li>As soon as possible</li>\n<li>Art + Science: experience helps</li>\n</ul>\n<h2>How</h2>\n<ul>\n<li>New coders: Python unittest and doctests</li>\n<li>Experienced coders: pytest</li>\n</ul>\n<h2>Next Step</h2>\n<ul>\n<li>New coders: pytest</li>\n<li>Experienced coders: Continuous Integration</li>\n</ul>\n<h1>Other</h1>\n<h2>Dependency Management/Deployment</h2>\n<ul>\n<li>VMs</li>\n<li>Containers</li>\n<li>Virtual Env</li>\n</ul>\n<h2>Development Environment</h2>\n<ul>\n<li>CLI vs. GUI</li>\n<li>Linux/Unix/Windows/OS X</li>\n</ul>",
    "speaker": 111,
    "cancelled": false,
    "proposal_base": 146,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 9,
  "fields": {
    "slot": null,
    "title": "Cheating on your math homework with SymPy",
    "description": "I'd like to give a talk on the SymPy.  It's probably the least well-known of the SciPy packages (so it's time to show it some love).  It's a symbolic computation/Computer Algebra system in the same vein as Mathematica or Maple.",
    "description_html": "<p>I'd like to give a talk on the SymPy.  It's probably the least well-known of the SciPy packages (so it's time to show it some love).  It's a symbolic computation/Computer Algebra system in the same vein as Mathematica or Maple.</p>",
    "abstract": "- Installation\r\n- Basic Algebra Stuff (about 40% of talk)\r\n  - Define symbols\r\n  - Build expressions\r\n  - How Sympy uses exact values i.e. pi * exp(5) + sqrt(8) until told to evaluate as float\r\n  - Expand an expression\r\n  - Factor expression\r\n  - Build an expression from a string (sym-pify)\r\n  - Substitute a value or expression\r\n  - Define an equation\r\n  - Solve for X\r\n  - Systems of Equations\r\n  - Printing\r\n- Trigonometry (just some basic stuff using trig expressions)\r\n- Just a little calculus (examples, limits, derivatives, integrals)  \r\n- Linear Algebra (Focus about 40% of talk on this to aid students in statistics, analytics, and machine learning)",
    "abstract_html": "<ul>\n<li>Installation</li>\n<li>Basic Algebra Stuff (about 40% of talk)</li>\n<li>Define symbols</li>\n<li>Build expressions</li>\n<li>How Sympy uses exact values i.e. pi * exp(5) + sqrt(8) until told to evaluate as float</li>\n<li>Expand an expression</li>\n<li>Factor expression</li>\n<li>Build an expression from a string (sym-pify)</li>\n<li>Substitute a value or expression</li>\n<li>Define an equation</li>\n<li>Solve for X</li>\n<li>Systems of Equations</li>\n<li>Printing</li>\n<li>Trigonometry (just some basic stuff using trig expressions)</li>\n<li>Just a little calculus (examples, limits, derivatives, integrals)  </li>\n<li>Linear Algebra (Focus about 40% of talk on this to aid students in statistics, analytics, and machine learning)</li>\n</ul>",
    "speaker": 151,
    "cancelled": false,
    "proposal_base": 172,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 11,
  "fields": {
    "slot": null,
    "title": "The modern command-line tool stack: Pipenv, Click, and friends",
    "description": "Until recently, I was still writing Python command-line tools like it's the mid-00s. In this talk, you'll learn about the tools I found to modernize development, installation, and isolation as well as the libraries that make building CLIs and working with the OS easy. We'll cover Pipenv and how best to use it with setuptools, as well as Click and other libraries useful for this task.",
    "description_html": "<p>Until recently, I was still writing Python command-line tools like it's the mid-00s. In this talk, you'll learn about the tools I found to modernize development, installation, and isolation as well as the libraries that make building CLIs and working with the OS easy. We'll cover Pipenv and how best to use it with setuptools, as well as Click and other libraries useful for this task.</p>",
    "abstract": "I've been a Python developer since 2001, and when I sit down to make a new command-line Python tool, I often write them like it's still early last decade. Late last year, I built a new command-line program that has proven to be reasonably popular, but I found that getting my tool up and running cleanly, with predictable dependencies, was a problem.\r\n\r\nEarly this year, I decided to modernize this particular project, simplifying it so that anyone could get set up with exactly the same dependencies I had, and improving the user experience by making the tool a modern one.\r\n\r\nThis talk will cover how I use Pipenv to modernize the experience of using my tool after cloning it from GitHub, transparently setting up a virtualenv in one command without reconfiguring their working environment.\r\n\r\nI'll also talk about libraries I now use to build the app, including Click, and a number of other things both in and out of the standard library that give the tool a modern command-line UX and make it a good citizen of the OS.",
    "abstract_html": "<p>I've been a Python developer since 2001, and when I sit down to make a new command-line Python tool, I often write them like it's still early last decade. Late last year, I built a new command-line program that has proven to be reasonably popular, but I found that getting my tool up and running cleanly, with predictable dependencies, was a problem.</p>\n<p>Early this year, I decided to modernize this particular project, simplifying it so that anyone could get set up with exactly the same dependencies I had, and improving the user experience by making the tool a modern one.</p>\n<p>This talk will cover how I use Pipenv to modernize the experience of using my tool after cloning it from GitHub, transparently setting up a virtualenv in one command without reconfiguring their working environment.</p>\n<p>I'll also talk about libraries I now use to build the app, including Click, and a number of other things both in and out of the standard library that give the tool a modern command-line UX and make it a good citizen of the OS.</p>",
    "speaker": 47,
    "cancelled": false,
    "proposal_base": 40,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 12,
  "fields": {
    "slot": null,
    "title": "Python in Serverless Architectures",
    "description": "Serverless architectures are all the rage right now, but why? The cost savings? The developer story? Because it's shiny and new?\r\n\r\nIn this talk I will start with a basic Flask App and show the process of migrating to a serverless architecture on AWS using the Serverless framework. Along the way, we'll also highlight some of the tradeoffs developers make when choosing a serverless architecture.",
    "description_html": "<p>Serverless architectures are all the rage right now, but why? The cost savings? The developer story? Because it's shiny and new?</p>\n<p>In this talk I will start with a basic Flask App and show the process of migrating to a serverless architecture on AWS using the Serverless framework. Along the way, we'll also highlight some of the tradeoffs developers make when choosing a serverless architecture.</p>",
    "abstract": "You're familiar with backend web development in the Python ecosystem, Flask, Django, Pyramid, all of it. Things are going smoothly in the world of backend. Great! \r\n\r\nOne day you're cruising through HackerNews and all of a sudden see the words \"Serverless Architectures\" pop up. Oh dear. \"Servers? That's where backend code lives!\", you protest, \"what is the racket all about?\" \r\n\r\nLucky for us, we know Python. A first-class citizen in the world of serverless architectures. \r\n\r\nServerless architectures are on the rise, so lets take a look at all the moving pieces that go into making one. We begin our journey in the familiar land of Flask with a small, but useful, backend application. We will demystify serverless architectures using a very-confusingly-named utility called...ahem...Serverless. Piece by piece we will come to understand ways of doing user authentication, database interaction, deployment, and testing for our new fangled serverless application. We'll explore the pros and the cons of our choices as we make them.\r\n\r\nBy the end of our time together serverless architectures will transform from meaningless buzzword to a valid architecture decision you have all the tools to evaluate.",
    "abstract_html": "<p>You're familiar with backend web development in the Python ecosystem, Flask, Django, Pyramid, all of it. Things are going smoothly in the world of backend. Great! </p>\n<p>One day you're cruising through HackerNews and all of a sudden see the words \"Serverless Architectures\" pop up. Oh dear. \"Servers? That's where backend code lives!\", you protest, \"what is the racket all about?\" </p>\n<p>Lucky for us, we know Python. A first-class citizen in the world of serverless architectures. </p>\n<p>Serverless architectures are on the rise, so lets take a look at all the moving pieces that go into making one. We begin our journey in the familiar land of Flask with a small, but useful, backend application. We will demystify serverless architectures using a very-confusingly-named utility called...ahem...Serverless. Piece by piece we will come to understand ways of doing user authentication, database interaction, deployment, and testing for our new fangled serverless application. We'll explore the pros and the cons of our choices as we make them.</p>\n<p>By the end of our time together serverless architectures will transform from meaningless buzzword to a valid architecture decision you have all the tools to evaluate.</p>",
    "speaker": 48,
    "cancelled": false,
    "proposal_base": 42,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 13,
  "fields": {
    "slot": null,
    "title": "Easier Classes: Python Classes Without All The Cruft",
    "description": "In this talk we'll take a look at how to cut down on the boilerplate required in making a well-behaved Python class. We'll first see how to make classes with proper string representations, comparability, iterability, and immutability. Then we'll dive into helper tools built-in to the standard library and available in third-party libraries.",
    "description_html": "<p>In this talk we'll take a look at how to cut down on the boilerplate required in making a well-behaved Python class. We'll first see how to make classes with proper string representations, comparability, iterability, and immutability. Then we'll dive into helper tools built-in to the standard library and available in third-party libraries.</p>",
    "abstract": "When bundling up data, sometimes tuples and dictionaries don't quite cut it. Python's classes are powerful tools for data storage and manipulation, but it can take quite a bit of boilerplate code to make a well-behaved Python class. In this talk we're going to discuss how a well-behaved class should work and take a look at a number of helper libraries for creating well-behaved classes.\r\n\r\nWe'll first see how to make classes with proper string representations, comparability, iterability, and immutability. Then we'll dive into helper tools built-in to the standard library and available in third-party libraries.\r\n\r\nWe'll look at namedtuple, NamedTuple (not a typo), attrs, and the new Python 3.7 dataclasses.\r\n\r\nMost of the libraries discussed in this talk are only available in Python 3, so if you're not using Python 3, hopefully this talk will encourage you to upgrade.",
    "abstract_html": "<p>When bundling up data, sometimes tuples and dictionaries don't quite cut it. Python's classes are powerful tools for data storage and manipulation, but it can take quite a bit of boilerplate code to make a well-behaved Python class. In this talk we're going to discuss how a well-behaved class should work and take a look at a number of helper libraries for creating well-behaved classes.</p>\n<p>We'll first see how to make classes with proper string representations, comparability, iterability, and immutability. Then we'll dive into helper tools built-in to the standard library and available in third-party libraries.</p>\n<p>We'll look at namedtuple, NamedTuple (not a typo), attrs, and the new Python 3.7 dataclasses.</p>\n<p>Most of the libraries discussed in this talk are only available in Python 3, so if you're not using Python 3, hopefully this talk will encourage you to upgrade.</p>",
    "speaker": 50,
    "cancelled": false,
    "proposal_base": 45,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 15,
  "fields": {
    "slot": null,
    "title": "Automated Regression Testing with Splinter and Jupyter",
    "description": "So you wrote a bunch of great unit tests but your site is still broken? Maybe it\u2019s time to start investing in a suite of end-to-end regression tests. In this talk we'll explore practical examples of developing automated tests using Selenium (via Splinter) and exploratory testing using Jupyter sessions.",
    "description_html": "<p>So you wrote a bunch of great unit tests but your site is still broken? Maybe it\u2019s time to start investing in a suite of end-to-end regression tests. In this talk we'll explore practical examples of developing automated tests using Selenium (via Splinter) and exploratory testing using Jupyter sessions.</p>",
    "abstract": "This talk will start with a background on testing and quality assurance:\r\n\r\n- Terminology\r\n  - Unit vs. Integration vs. System (end-to-end)\r\n  - Automated vs. Exploratory\r\n\r\n- Goals of end-to-end testing\r\n  - Test production server configurations\r\n  - Test JavaScript engines in browsers\r\n  - Responsiveness/visual testing\r\n  - External API hookups\r\n\r\nThe next section will outline a layered approach for writing end-to-end tests with each step building on the last:\r\n\r\n- Selenium basics\r\n- Language bindings (Python examples)\r\n- Sequential test scripts\r\n- Adopting the \u201cPage Object Model\u201d\r\n- Using a WebDriver API wrapper (Splinter examples)\r\n- Helper functions to enable automated exploratory testing\r\n\r\nBefore the final section, there will be a demo of the previous examples run against a live website.\r\n\r\nThe final section will recommend an approach to building tests against your own site:\r\n\r\n- Alternatives\r\n  - Dogfooding\r\n  - Beta testers\r\n  - Manual testers\r\n\r\n- Make your site testable\r\n  - Name your forms and fields\r\n  - Accessible sites are testable sites\r\n  - Test mode for account signups\r\n  - Expose internal state when possible\r\n  - Allow \u201ccheats\u201d on your staging server\r\n\r\n-  Writing tests\r\n  - Start with under-tested, high-risk features\r\n  - Make your bot users identifiable for easy cleanup\r\n  - Run your tests every time you deploy\r\n  - Incorporate logging, screenshots, and reports",
    "abstract_html": "<p>This talk will start with a background on testing and quality assurance:</p>\n<ul>\n<li>Terminology</li>\n<li>Unit vs. Integration vs. System (end-to-end)</li>\n<li>\n<p>Automated vs. Exploratory</p>\n</li>\n<li>\n<p>Goals of end-to-end testing</p>\n</li>\n<li>Test production server configurations</li>\n<li>Test JavaScript engines in browsers</li>\n<li>Responsiveness/visual testing</li>\n<li>External API hookups</li>\n</ul>\n<p>The next section will outline a layered approach for writing end-to-end tests with each step building on the last:</p>\n<ul>\n<li>Selenium basics</li>\n<li>Language bindings (Python examples)</li>\n<li>Sequential test scripts</li>\n<li>Adopting the \u201cPage Object Model\u201d</li>\n<li>Using a WebDriver API wrapper (Splinter examples)</li>\n<li>Helper functions to enable automated exploratory testing</li>\n</ul>\n<p>Before the final section, there will be a demo of the previous examples run against a live website.</p>\n<p>The final section will recommend an approach to building tests against your own site:</p>\n<ul>\n<li>Alternatives</li>\n<li>Dogfooding</li>\n<li>Beta testers</li>\n<li>\n<p>Manual testers</p>\n</li>\n<li>\n<p>Make your site testable</p>\n</li>\n<li>Name your forms and fields</li>\n<li>Accessible sites are testable sites</li>\n<li>Test mode for account signups</li>\n<li>Expose internal state when possible</li>\n<li>\n<p>Allow \u201ccheats\u201d on your staging server</p>\n</li>\n<li>\n<p>Writing tests</p>\n</li>\n<li>Start with under-tested, high-risk features</li>\n<li>Make your bot users identifiable for easy cleanup</li>\n<li>Run your tests every time you deploy</li>\n<li>Incorporate logging, screenshots, and reports</li>\n</ul>",
    "speaker": 69,
    "cancelled": false,
    "proposal_base": 70,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 16,
  "fields": {
    "slot": null,
    "title": "Exploration of Neural-Gestural Interfaces for the Control of Robots",
    "description": "As technology improves at a rapid rate, experimentation in the ways in which people interact with machines and computers becomes more significant. Most tools for communication are limiting as they only interact with a user on a basic level, usually on a two-dimensional plane. However, by taking advantage of new technology new interfaces can be designed in order to better interact with machines.",
    "description_html": "<p>As technology improves at a rapid rate, experimentation in the ways in which people interact with machines and computers becomes more significant. Most tools for communication are limiting as they only interact with a user on a basic level, usually on a two-dimensional plane. However, by taking advantage of new technology new interfaces can be designed in order to better interact with machines.</p>",
    "abstract": "As technology improves at a rapid rate, experimentation in the ways in which people interact with machines and computers becomes more significant. The most common interfaces today are a mouse, keyboard, and screen. However, these devices are limiting as they only interact with a user on a basic level, usually on a two-dimensional plane. This project aims to create a more natural communication between the user and a machine, in this case a robot, through gestures and neural feedback. The data of hand and arm gestures are taken using the MyoBand, which records electrical impulses, to give the robot directions. The Emotiv headset is used to record the level of concentration of the user, so that the robot may only be controlled if the user is paying close attention.\r\n\r\nWe'll discuss:\r\n\r\n+ Background on neural interfaces, gestural interfaces, and robots\r\n+ Overview of technology used in the project: Emotiv headset, Myo Band, Raspberry Pi\r\n+ Python scripts\r\n+ Applications and future directions",
    "abstract_html": "<p>As technology improves at a rapid rate, experimentation in the ways in which people interact with machines and computers becomes more significant. The most common interfaces today are a mouse, keyboard, and screen. However, these devices are limiting as they only interact with a user on a basic level, usually on a two-dimensional plane. This project aims to create a more natural communication between the user and a machine, in this case a robot, through gestures and neural feedback. The data of hand and arm gestures are taken using the MyoBand, which records electrical impulses, to give the robot directions. The Emotiv headset is used to record the level of concentration of the user, so that the robot may only be controlled if the user is paying close attention.</p>\n<p>We'll discuss:</p>\n<ul>\n<li>Background on neural interfaces, gestural interfaces, and robots</li>\n<li>Overview of technology used in the project: Emotiv headset, Myo Band, Raspberry Pi</li>\n<li>Python scripts</li>\n<li>Applications and future directions</li>\n</ul>",
    "speaker": 72,
    "cancelled": false,
    "proposal_base": 72,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 17,
  "fields": {
    "slot": null,
    "title": "You Don't Need That!",
    "description": "Not every design pattern makes sense in Python. This talk builds up design patterns commonly used in enterprise languages, and shows the features in Python that make these approaches unnecessary.",
    "description_html": "<p>Not every design pattern makes sense in Python. This talk builds up design patterns commonly used in enterprise languages, and shows the features in Python that make these approaches unnecessary.</p>",
    "abstract": "Software design is hard. That's why we invented design patterns. Design patterns abstract common approaches to problem solving into generic approaches that can be modified to suit the application at hand.\r\n\r\nMany of the design patterns in common use today are inspired by static object-oriented Enterprise languages like Java. These languages have a feature set that is somewhat more restrictive than Python's, and many design patterns are built to provide elegant ways around these restrictions.\r\n\r\nDesign patterns, like Dependency Injection, and the Visitor Pattern arise from restrictions on how you can pass code around at runtime. Other patterns, like Iterators, have been replaced by first-class language features of their own.\r\n\r\nAnd some patterns, like Threads just never worked at all.\r\n\r\nIn this talk, we'll build up several design patterns, and then look at the Python features that make each pattern unnecessary. In doing so, you'll get a view into idiomatically translating code into Python, and a greater understanding of design decisions users of other languages need to make.",
    "abstract_html": "<p>Software design is hard. That's why we invented design patterns. Design patterns abstract common approaches to problem solving into generic approaches that can be modified to suit the application at hand.</p>\n<p>Many of the design patterns in common use today are inspired by static object-oriented Enterprise languages like Java. These languages have a feature set that is somewhat more restrictive than Python's, and many design patterns are built to provide elegant ways around these restrictions.</p>\n<p>Design patterns, like Dependency Injection, and the Visitor Pattern arise from restrictions on how you can pass code around at runtime. Other patterns, like Iterators, have been replaced by first-class language features of their own.</p>\n<p>And some patterns, like Threads just never worked at all.</p>\n<p>In this talk, we'll build up several design patterns, and then look at the Python features that make each pattern unnecessary. In doing so, you'll get a view into idiomatically translating code into Python, and a greater understanding of design decisions users of other languages need to make.</p>",
    "speaker": 97,
    "cancelled": false,
    "proposal_base": 93,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 18,
  "fields": {
    "slot": null,
    "title": "Oh the places you'll go to find memory leaks",
    "description": "Memory use in long running processes is one of those problems that is a non-issue... until you've completely run out of memory. Now that you have hit the proverbial brick wall, how do you recover? In this talk, you'll learn about: memory profiling tools, utilizing Elasticsearch to track memory use on a live system, memory management of tiny objects, and other insights along the way.",
    "description_html": "<p>Memory use in long running processes is one of those problems that is a non-issue... until you've completely run out of memory. Now that you have hit the proverbial brick wall, how do you recover? In this talk, you'll learn about: memory profiling tools, utilizing Elasticsearch to track memory use on a live system, memory management of tiny objects, and other insights along the way.</p>",
    "abstract": "At the core of your company's flagship app is a long running process that eventually becomes hungry for memory. You have to watch it like a hawk and run rolling restarts randomly throughout the day. It sure would be nice to know exactly what's happening to memory!\r\nIn this talk, you'll learn about available Python memory profiling tools, using Elasticsearch to track per request memory use on a live system, memory pools and arenas for tiny object memory management, system memory versus process memory visible to a garbage collector, use of interprocess communication to manage your instrumentation, querying garbage collector for object inventory, memory allocation during package loading, and plain human perseverance. Also, we'll discuss the fact that you absolutely must get off Python 2.7.x for any long running processes.",
    "abstract_html": "<p>At the core of your company's flagship app is a long running process that eventually becomes hungry for memory. You have to watch it like a hawk and run rolling restarts randomly throughout the day. It sure would be nice to know exactly what's happening to memory!\nIn this talk, you'll learn about available Python memory profiling tools, using Elasticsearch to track per request memory use on a live system, memory pools and arenas for tiny object memory management, system memory versus process memory visible to a garbage collector, use of interprocess communication to manage your instrumentation, querying garbage collector for object inventory, memory allocation during package loading, and plain human perseverance. Also, we'll discuss the fact that you absolutely must get off Python 2.7.x for any long running processes.</p>",
    "speaker": 102,
    "cancelled": false,
    "proposal_base": 101,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 19,
  "fields": {
    "slot": null,
    "title": "Auditing your site for accessibility: now what?",
    "description": "Web accessibility is important - about 1 in 5 people in the United States have some kind of disability, and not including them limits your reach.  But once you've heard about the basics, how do you get started?  In this talk, I'll walk you through the process of finding issues in your site, and discuss processes to fix them.",
    "description_html": "<p>Web accessibility is important - about 1 in 5 people in the United States have some kind of disability, and not including them limits your reach.  But once you've heard about the basics, how do you get started?  In this talk, I'll walk you through the process of finding issues in your site, and discuss processes to fix them.</p>",
    "abstract": "So you\u2019ve heard about web accessibility - maybe you\u2019ve only heard it in passing, or maybe you\u2019ve read some docs or blog posts, or perhaps you\u2019ve even attended a conference talk about it.  But oftentimes this is where you\u2019re left hanging, holding a toolbag with a gigantic \u201cnow what?\u201d.  Starting out can feel daunting, especially if you have a large application to deal with.\r\n\r\nHere are the steps we\u2019ll cover:\r\n\r\n1. Identify - how do you find potential or actual problems\r\n2. Verify - are these real problems, or potential false positives\r\n3. Plan - finding the most efficient ways to handle the critical path\r\n4. Due diligence - fixing, testing, future proofing\r\n\r\nWe\u2019ll talk about all of these in the context of a familiar website that recently went through this same process.",
    "abstract_html": "<p>So you\u2019ve heard about web accessibility - maybe you\u2019ve only heard it in passing, or maybe you\u2019ve read some docs or blog posts, or perhaps you\u2019ve even attended a conference talk about it.  But oftentimes this is where you\u2019re left hanging, holding a toolbag with a gigantic \u201cnow what?\u201d.  Starting out can feel daunting, especially if you have a large application to deal with.</p>\n<p>Here are the steps we\u2019ll cover:</p>\n<ol>\n<li>Identify - how do you find potential or actual problems</li>\n<li>Verify - are these real problems, or potential false positives</li>\n<li>Plan - finding the most efficient ways to handle the critical path</li>\n<li>Due diligence - fixing, testing, future proofing</li>\n</ol>\n<p>We\u2019ll talk about all of these in the context of a familiar website that recently went through this same process.</p>",
    "speaker": 43,
    "cancelled": false,
    "proposal_base": 102,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 20,
  "fields": {
    "slot": null,
    "title": "Python, robotics, opencv and vision.",
    "description": "This talk explores mentoring a FIRST FRC Robotics Team.\r\n- FIRST stands for For Inspiration and Recognition of Science and Technology.\r\n- FRC = FIRST Robotics Challenge\r\n- https://www.firstinspites.org/\r\n\r\nSpecifically it gives an overview of using Python to teach students how to integrate Computer Vision capabilities into our FRC robot.  Along the way we touch on all the juicy technical details.",
    "description_html": "<p>This talk explores mentoring a FIRST FRC Robotics Team.\n- FIRST stands for For Inspiration and Recognition of Science and Technology.\n- FRC = FIRST Robotics Challenge\n- https://www.firstinspites.org/</p>\n<p>Specifically it gives an overview of using Python to teach students how to integrate Computer Vision capabilities into our FRC robot.  Along the way we touch on all the juicy technical details.</p>",
    "abstract": "A brief overview of using Python to power the Computer Vision function of our FIRST FRC Robotics Robot.\r\n \r\nA FIRST robotics team mentor briefly talks about using Python to teach students how to integrate Computer Vision into our team's robot.\r\n\r\nFirst we meet the robot. Robot baby pictures (yay!) and other fun stuff. Followed by a quick overview of what it means to be a mentor on a FIRST FRC robotics team. We end the section discussing the components of our robot and how they all fit together to integrate vision.\r\n\r\nWe explore working with the students to build GRIP pipelines. GRIP is an FRC tool to allow students to quickly build opencv feature detection routines for game elements. We discuss what opencv is and why you should care! The GRIP tool is a flexible development environment to quickly chain together opencv primitives and observe the end results. When game element features are being detected as the students need, the tool can export into our favorite language! Python!\r\n\r\nOur team in the past has run this generated opencv GRIP Python \"pipeline\" on an external CPU. Due to our Team's budget constraints we use a Raspberry PI 3 with a USB web cam. (< $150) We mount and power the pi and camera on the robot. We run the \"pipeline\" and see things. Well almost!\r\n\r\nIn addition to the student generated pipeline, we also have a small python program that reads images from the camera as often as possible and detects features for the robot to target. This python code does some basic filtering and then sends the information to the robot control board (RoboRIO).\r\n\r\nWe end the talk with a brief description of using the vision information to control the robot.",
    "abstract_html": "<p>A brief overview of using Python to power the Computer Vision function of our FIRST FRC Robotics Robot.</p>\n<p>A FIRST robotics team mentor briefly talks about using Python to teach students how to integrate Computer Vision into our team's robot.</p>\n<p>First we meet the robot. Robot baby pictures (yay!) and other fun stuff. Followed by a quick overview of what it means to be a mentor on a FIRST FRC robotics team. We end the section discussing the components of our robot and how they all fit together to integrate vision.</p>\n<p>We explore working with the students to build GRIP pipelines. GRIP is an FRC tool to allow students to quickly build opencv feature detection routines for game elements. We discuss what opencv is and why you should care! The GRIP tool is a flexible development environment to quickly chain together opencv primitives and observe the end results. When game element features are being detected as the students need, the tool can export into our favorite language! Python!</p>\n<p>Our team in the past has run this generated opencv GRIP Python \"pipeline\" on an external CPU. Due to our Team's budget constraints we use a Raspberry PI 3 with a USB web cam. (&lt; $150) We mount and power the pi and camera on the robot. We run the \"pipeline\" and see things. Well almost!</p>\n<p>In addition to the student generated pipeline, we also have a small python program that reads images from the camera as often as possible and detects features for the robot to target. This python code does some basic filtering and then sends the information to the robot control board (RoboRIO).</p>\n<p>We end the talk with a brief description of using the vision information to control the robot.</p>",
    "speaker": 105,
    "cancelled": false,
    "proposal_base": 107,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 21,
  "fields": {
    "slot": null,
    "title": "Egad! How Do We Start Writing (Better) Tests?",
    "description": "Some have never automated tests and can\u2019t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. Start with proven advice from this talk!",
    "description_html": "<p>Some have never automated tests and can\u2019t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. Start with proven advice from this talk!</p>",
    "abstract": "Some have never automated tests and can\u2019t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? We will start with a quick round of \u201cbuzzword bingo\u201d because everyone needs the same vocabulary. Then, we will follow the story of \u201cAmanda the Panda\u201d (representing the everyday Pythoneer) as she jumps into testing and automation with Python.\r\n\r\nAmanda\u2019s journey:\r\n1. What skills do I need to get started? (basic programming)\r\n2. How do I write \u201cgood\u201d tests? (Testing Pyramid, behavior focus, good spec)\r\n3. What framework should I use? (pytest + plugins; recipes)\r\n4. How do I avoid duplicating so much test code? (design patterns)\r\n5. There are too many tests! Which ones do I automate? (100% is a bad goal; pick highest ROI; automation challenge; exploratory testing)\r\n6. Running tests locally is bogging down my machine! (CI is production for tests; running in parallel)\r\n7. How can I triage all of these test results?\r\n8. Why do some of these tests keep failing again and again?\r\n9. My friend\u2019s team already has 1000s of tests that are failing. Should he start over?\r\n10. We need more help! How do I hire Software Engineers in Test?",
    "abstract_html": "<p>Some have never automated tests and can\u2019t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? We will start with a quick round of \u201cbuzzword bingo\u201d because everyone needs the same vocabulary. Then, we will follow the story of \u201cAmanda the Panda\u201d (representing the everyday Pythoneer) as she jumps into testing and automation with Python.</p>\n<p>Amanda\u2019s journey:\n1. What skills do I need to get started? (basic programming)\n2. How do I write \u201cgood\u201d tests? (Testing Pyramid, behavior focus, good spec)\n3. What framework should I use? (pytest + plugins; recipes)\n4. How do I avoid duplicating so much test code? (design patterns)\n5. There are too many tests! Which ones do I automate? (100% is a bad goal; pick highest ROI; automation challenge; exploratory testing)\n6. Running tests locally is bogging down my machine! (CI is production for tests; running in parallel)\n7. How can I triage all of these test results?\n8. Why do some of these tests keep failing again and again?\n9. My friend\u2019s team already has 1000s of tests that are failing. Should he start over?\n10. We need more help! How do I hire Software Engineers in Test?</p>",
    "speaker": 106,
    "cancelled": false,
    "proposal_base": 108,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 22,
  "fields": {
    "slot": null,
    "title": "Duck Typing Is For The Birds",
    "description": "This talk is intended to be an introduction to implementing static typing into your python code.  I will present information on how to implement static typing into new and existing code bases.  Talk about the reasons why someone would want to implement static types and why I was against it only one year ago.",
    "description_html": "<p>This talk is intended to be an introduction to implementing static typing into your python code.  I will present information on how to implement static typing into new and existing code bases.  Talk about the reasons why someone would want to implement static types and why I was against it only one year ago.</p>",
    "abstract": "In this presentation I would like to introduce implementing static typing to people who may not be familiar, and give reason for why static types can be valuable, and discuss how it can reduce the potential for bugs.  I will briefly talk about the history that led to the current and future state of static type support within Python. \r\n\r\n- Code examples for implementing type checking for common scenarios\r\n- Auto-generating static type annotations with MonkeyType\r\n- Comparing mypy and Pyre for type checking\r\n- Questions and answers\r\n\r\n### Relavent PEPs:\r\n[PEP483](https://www.python.org/dev/peps/pep-0483/)\r\n[PEP484](https://www.python.org/dev/peps/pep-0484/)\r\n[PEP526](https://www.python.org/dev/peps/pep-0526/)\r\n\r\n### Libraries:\r\n[mypy](http://mypy-lang.org/)\r\n[Pyre](https://github.com/facebook/pyre-check)\r\n[MonkeyType](https://github.com/Instagram/MonkeyType)",
    "abstract_html": "<p>In this presentation I would like to introduce implementing static typing to people who may not be familiar, and give reason for why static types can be valuable, and discuss how it can reduce the potential for bugs.  I will briefly talk about the history that led to the current and future state of static type support within Python. </p>\n<ul>\n<li>Code examples for implementing type checking for common scenarios</li>\n<li>Auto-generating static type annotations with MonkeyType</li>\n<li>Comparing mypy and Pyre for type checking</li>\n<li>Questions and answers</li>\n</ul>\n<h3>Relavent PEPs:</h3>\n<p><a href=\"https://www.python.org/dev/peps/pep-0483/\">PEP483</a>\n<a href=\"https://www.python.org/dev/peps/pep-0484/\">PEP484</a>\n<a href=\"https://www.python.org/dev/peps/pep-0526/\">PEP526</a></p>\n<h3>Libraries:</h3>\n<p><a href=\"http://mypy-lang.org/\">mypy</a>\n<a href=\"https://github.com/facebook/pyre-check\">Pyre</a>\n<a href=\"https://github.com/Instagram/MonkeyType\">MonkeyType</a></p>",
    "speaker": 87,
    "cancelled": false,
    "proposal_base": 117,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 23,
  "fields": {
    "slot": null,
    "title": "Advanced Pickle Security",
    "description": "It's no secret Python's `pickle` module is unsafe. It's also very popular, especially in the scientific Python community. Many of its users actually have pretty good reasons to use it, so just telling them not to isn't very helpful. This talk explores how Pickles are unsafe, advanced exploitation techniques, and how we can make Pickles safer without giving up on its useful properties.",
    "description_html": "<p>It's no secret Python's <code>pickle</code> module is unsafe. It's also very popular, especially in the scientific Python community. Many of its users actually have pretty good reasons to use it, so just telling them not to isn't very helpful. This talk explores how Pickles are unsafe, advanced exploitation techniques, and how we can make Pickles safer without giving up on its useful properties.</p>",
    "abstract": "Python's standard library comes with an object serialization framework called `pickle`. It's no secret pickles are unsafe. Any time you load a pickle, you really have no guarantee what it'll do. While it's designed to just reconstitute objects from some bytes, it could open network connections, delete all your files, or really anything else it wants.\r\n\r\nDespite all of these flaws, it's very popular, especially in the scientific Python community. Many of its users actually have pretty good reasons to use it, so just telling them not to isn't very helpful. For example, numpy's various array types have custom behavior to fine-tune how they are serialized and deserialized -- features explicitly supported by the Pickle module's extension points. Most scientific applications also don't just have a matrix: they might have fairly complex object graphs that require serialization. Pickle supports this out of the box, and that's great!\r\n\r\nThis talk is intended for intermediate and expert Python programmers. It's expected that you have heard of the Pickle module before and that you know it's unsafe. We'll (quickly) go through how Pickle works at a Pickle VM opcode level. Then we'll show how you can get arbitrary code execution, followed by some more advanced exploitation techniques (e.g. how you can put other behavior in a pickle while keeping equivalent functionality; e.g. the pickle still turns into the object you were expecting). Finally, we'll talk about how we can make this safe again in the end anyway, culminating in the practical implementation I have open sourced. \r\n\r\nIf I have time (big stretch for the talk, but maybe not for the hallway track), I'll show techniques for how to attack Pickles that are \"protected\" by malleable encryption schemes like AES-CTR.",
    "abstract_html": "<p>Python's standard library comes with an object serialization framework called <code>pickle</code>. It's no secret pickles are unsafe. Any time you load a pickle, you really have no guarantee what it'll do. While it's designed to just reconstitute objects from some bytes, it could open network connections, delete all your files, or really anything else it wants.</p>\n<p>Despite all of these flaws, it's very popular, especially in the scientific Python community. Many of its users actually have pretty good reasons to use it, so just telling them not to isn't very helpful. For example, numpy's various array types have custom behavior to fine-tune how they are serialized and deserialized -- features explicitly supported by the Pickle module's extension points. Most scientific applications also don't just have a matrix: they might have fairly complex object graphs that require serialization. Pickle supports this out of the box, and that's great!</p>\n<p>This talk is intended for intermediate and expert Python programmers. It's expected that you have heard of the Pickle module before and that you know it's unsafe. We'll (quickly) go through how Pickle works at a Pickle VM opcode level. Then we'll show how you can get arbitrary code execution, followed by some more advanced exploitation techniques (e.g. how you can put other behavior in a pickle while keeping equivalent functionality; e.g. the pickle still turns into the object you were expecting). Finally, we'll talk about how we can make this safe again in the end anyway, culminating in the practical implementation I have open sourced. </p>\n<p>If I have time (big stretch for the talk, but maybe not for the hallway track), I'll show techniques for how to attack Pickles that are \"protected\" by malleable encryption schemes like AES-CTR.</p>",
    "speaker": 118,
    "cancelled": false,
    "proposal_base": 119,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 24,
  "fields": {
    "slot": null,
    "title": "Solving an NP-Hard problem for fun and profit.",
    "description": "You've just been given a task by your client. The problem seems simple at first, but after some research you find out that your problem is not just hard, it's NP-Hard! At first, a solution appears impossible but you're not to be stopped! You're a programmer! You got this! You have the Python! But... now what? How do you solve it?",
    "description_html": "<p>You've just been given a task by your client. The problem seems simple at first, but after some research you find out that your problem is not just hard, it's NP-Hard! At first, a solution appears impossible but you're not to be stopped! You're a programmer! You got this! You have the Python! But... now what? How do you solve it?</p>",
    "abstract": "Last year I was given a task by the publishers of the CATAN board game. They wanted a tournament management tool that could help them organize, run, seat, and rank players in their world championships and several local qualifying events around the world. Most of the application was straightforward but they also had a very specific seating problem, and after doing some investigation I learned that their specific requirements made the task an NP-hard problem. The problem is this:\r\n\r\nGiven some number of players. Generate a number of tables where each table has 4 or 3 seats. Then from round to round seat players in such a way so that A) no player plays in the same seating position they previously sat in, and B) no player plays against someone they played against previously. Players should be seated as fairly as possible from round to round, and where there is a perfect solution the algorithm should arrive at it, and when there isn't it should arrive at the \"fairest\" solution possible. It should be able to handle any arbitrarily large number of players, and should run in seconds.\r\n\r\nIn this talk, I'm going to talk a bit more about this specific problem and how I solved it using Python. I will walk you through my different attempts and thought processes while attempting to develop a good solution. You will walk away with a process and framework to solve your own difficult problems and develop a scientific mindset that can help lead you to new discoveries.\r\n\r\nFinally, I will present how the algorithm works, and make suggestions to how it can be applied to solve other similar types of problems. I proudly present to you: The Gamer's Algorithm.\r\n\r\nP.S. The algorithm will be used for the first time in the wild at the CATAN World Championships at Origin Games Fair and the U.S. National Championships at Gencon in 2018.",
    "abstract_html": "<p>Last year I was given a task by the publishers of the CATAN board game. They wanted a tournament management tool that could help them organize, run, seat, and rank players in their world championships and several local qualifying events around the world. Most of the application was straightforward but they also had a very specific seating problem, and after doing some investigation I learned that their specific requirements made the task an NP-hard problem. The problem is this:</p>\n<p>Given some number of players. Generate a number of tables where each table has 4 or 3 seats. Then from round to round seat players in such a way so that A) no player plays in the same seating position they previously sat in, and B) no player plays against someone they played against previously. Players should be seated as fairly as possible from round to round, and where there is a perfect solution the algorithm should arrive at it, and when there isn't it should arrive at the \"fairest\" solution possible. It should be able to handle any arbitrarily large number of players, and should run in seconds.</p>\n<p>In this talk, I'm going to talk a bit more about this specific problem and how I solved it using Python. I will walk you through my different attempts and thought processes while attempting to develop a good solution. You will walk away with a process and framework to solve your own difficult problems and develop a scientific mindset that can help lead you to new discoveries.</p>\n<p>Finally, I will present how the algorithm works, and make suggestions to how it can be applied to solve other similar types of problems. I proudly present to you: The Gamer's Algorithm.</p>\n<p>P.S. The algorithm will be used for the first time in the wild at the CATAN World Championships at Origin Games Fair and the U.S. National Championships at Gencon in 2018.</p>",
    "speaker": 122,
    "cancelled": false,
    "proposal_base": 122,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 25,
  "fields": {
    "slot": null,
    "title": "Generating Music with Python and FoxDot",
    "description": "Learn how to make music with Python and FoxDot. We\u2019ll go through how to make a song in this live coded adventure. This talk is suited well for all audiences.",
    "description_html": "<p>Learn how to make music with Python and FoxDot. We\u2019ll go through how to make a song in this live coded adventure. This talk is suited well for all audiences.</p>",
    "abstract": "Audience:\r\nThis talk is suited well for all audiences due to the live coding nature of this talk. Since making music with Python is something that beginner programmers can start with and advanced audiences could find interacting with Python in this way meaningful.\r\n\r\nAn outline of my talk is as follows: \r\n\r\nSet Up\r\nThis talk will be live coded using the Python. There will also some slides that will be available on my website jessicagarson.com/Making-Music-with-Python, All code samples will also be up on my GitHub.\r\n\r\nIntroduce Myself\r\nQuick intro to set up the narrative of my presentation - Starting with something like: \u201cHi, my name is Jessica Garson. I\u2019m currently teaching Python at NYU. I\u2019m also a live coding DJ know as Messica Arson, I\u2019ve performed with Live Code NYC, the Future of Funk Labs as part of the DC Funk Parade and Hack && Tell DC \u201d. I\u2019ll  also cover administrative topics such where to find slides, and code samples from today\u2019s talk, and a link to code samples on my GitHub. I\u2019ll also provide my twitter handle. These will be displayed on a slide as well. \r\n\r\nThere is Something Magical About Hearing a Computer Make Sounds You Told It To\r\nI\u2019ll tell the story about how I started a live coding and discuss why making music with code is so powerful.\r\n\r\nFoxDot Installation \r\nWe'll discuss how install FoxDot and some errors I ran into while setting up.\r\n\r\nTour of the IDE \r\nThis will be a walkthrough the IDE.\r\n\r\nThe Coolest Part - The Tutorial Is Built In\r\nWe'll run an example from the tutorial.\r\n\r\nBasic Syntax \r\nWe'll discuss what the syntax looks like and how to create sounds easily. \r\n\r\np1, s1, d1?\r\nWe'll discuss what this means and how each channel helps layer sound differently. \r\n\r\nErrors \r\nWhat happens when you get errors, how do you solve them.\r\n\r\nCreating Our Melody\r\nWe'll create our melody to our song, and discuss how to keep your changes in sync with the flow of your song.\r\n\r\nAdding Effects and Changing Our Sound\r\nWe'll make changes to our sound by arranging the effects.\r\n\r\nUsing Samples\r\nWe\u2019ll discuss how to use samples. There are a bunch pre-loaded in and we'll discuss how to find them\r\n\r\nAdding Outside Samples\r\nI\u2019ll add in a sample of my own voice assigned to a variable and create a loop which plays this sample. \r\n\r\nCreating a Melody\r\nI\u2019ll create a loop that creates a melody and explain what the code is doing to create this sound. \r\n\r\nHow does FoxDot compare to the rest of the live coding ecosystem?\r\nWe'll compare FoxDot to TidalCycles and SonicPi and discuss the future of live coding.\r\n\r\nDance Party\r\nWe will listen to our song we created (hopefully a dance party will break out). \r\n\r\nNext Steps\r\nI\u2019ll point to a list of resources on my GitHub repository for the talk for learning more about a Python and FoxDot. I\u2019ll also give my contact information for keeping in touch and thank attendees for coming to the talk.",
    "abstract_html": "<p>Audience:\nThis talk is suited well for all audiences due to the live coding nature of this talk. Since making music with Python is something that beginner programmers can start with and advanced audiences could find interacting with Python in this way meaningful.</p>\n<p>An outline of my talk is as follows: </p>\n<p>Set Up\nThis talk will be live coded using the Python. There will also some slides that will be available on my website jessicagarson.com/Making-Music-with-Python, All code samples will also be up on my GitHub.</p>\n<p>Introduce Myself\nQuick intro to set up the narrative of my presentation - Starting with something like: \u201cHi, my name is Jessica Garson. I\u2019m currently teaching Python at NYU. I\u2019m also a live coding DJ know as Messica Arson, I\u2019ve performed with Live Code NYC, the Future of Funk Labs as part of the DC Funk Parade and Hack &amp;&amp; Tell DC \u201d. I\u2019ll  also cover administrative topics such where to find slides, and code samples from today\u2019s talk, and a link to code samples on my GitHub. I\u2019ll also provide my twitter handle. These will be displayed on a slide as well. </p>\n<p>There is Something Magical About Hearing a Computer Make Sounds You Told It To\nI\u2019ll tell the story about how I started a live coding and discuss why making music with code is so powerful.</p>\n<p>FoxDot Installation \nWe'll discuss how install FoxDot and some errors I ran into while setting up.</p>\n<p>Tour of the IDE \nThis will be a walkthrough the IDE.</p>\n<p>The Coolest Part - The Tutorial Is Built In\nWe'll run an example from the tutorial.</p>\n<p>Basic Syntax \nWe'll discuss what the syntax looks like and how to create sounds easily. </p>\n<p>p1, s1, d1?\nWe'll discuss what this means and how each channel helps layer sound differently. </p>\n<p>Errors \nWhat happens when you get errors, how do you solve them.</p>\n<p>Creating Our Melody\nWe'll create our melody to our song, and discuss how to keep your changes in sync with the flow of your song.</p>\n<p>Adding Effects and Changing Our Sound\nWe'll make changes to our sound by arranging the effects.</p>\n<p>Using Samples\nWe\u2019ll discuss how to use samples. There are a bunch pre-loaded in and we'll discuss how to find them</p>\n<p>Adding Outside Samples\nI\u2019ll add in a sample of my own voice assigned to a variable and create a loop which plays this sample. </p>\n<p>Creating a Melody\nI\u2019ll create a loop that creates a melody and explain what the code is doing to create this sound. </p>\n<p>How does FoxDot compare to the rest of the live coding ecosystem?\nWe'll compare FoxDot to TidalCycles and SonicPi and discuss the future of live coding.</p>\n<p>Dance Party\nWe will listen to our song we created (hopefully a dance party will break out). </p>\n<p>Next Steps\nI\u2019ll point to a list of resources on my GitHub repository for the talk for learning more about a Python and FoxDot. I\u2019ll also give my contact information for keeping in touch and thank attendees for coming to the talk.</p>",
    "speaker": 127,
    "cancelled": false,
    "proposal_base": 130,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 26,
  "fields": {
    "slot": null,
    "title": "How I Learned to Code with My Dad",
    "description": "I\u2019m nine years old, and I want to be a video game developer.  I learned about coding by watching my dad and asking questions. To me coding is like a \u201csport\u201d and I think lots of kids would like to code if they had a chance to learn and build things.  I\u2019d like to tell you how I got started, and show some of the projects I\u2019ve built. Then you can have ideas on how to help other kids get started.",
    "description_html": "<p>I\u2019m nine years old, and I want to be a video game developer.  I learned about coding by watching my dad and asking questions. To me coding is like a \u201csport\u201d and I think lots of kids would like to code if they had a chance to learn and build things.  I\u2019d like to tell you how I got started, and show some of the projects I\u2019ve built. Then you can have ideas on how to help other kids get started.</p>",
    "abstract": "My name is Alexander Preston, I\u2019m nine years old, and I love coding with my Dad.  To me, coding is like a \u201csport\u201d.  It\u2019s a fun activity you can do, and become better at.  I\u2019m hoping to become a video game developer, because (almost) everyone likes games.  I learned about coding by watching my dad, and asking what he was working on.  I started programming by using Scratch on a Raspberry Pi and building some games, and now I\u2019m learning to code in Python with Minecraft.  I think that lots of kids would love to code, and I\u2019d like to give some ideas about how to help them get started.  \r\n\r\nIn this talk I, with some help from my dad, will show how you can use Python with Minecraft to connect to and control the world.  We'll build buildings, blow them up, see what happens when Zombies invade, and other fun stuff we come up with.",
    "abstract_html": "<p>My name is Alexander Preston, I\u2019m nine years old, and I love coding with my Dad.  To me, coding is like a \u201csport\u201d.  It\u2019s a fun activity you can do, and become better at.  I\u2019m hoping to become a video game developer, because (almost) everyone likes games.  I learned about coding by watching my dad, and asking what he was working on.  I started programming by using Scratch on a Raspberry Pi and building some games, and now I\u2019m learning to code in Python with Minecraft.  I think that lots of kids would love to code, and I\u2019d like to give some ideas about how to help them get started.  </p>\n<p>In this talk I, with some help from my dad, will show how you can use Python with Minecraft to connect to and control the world.  We'll build buildings, blow them up, see what happens when Zombies invade, and other fun stuff we come up with.</p>",
    "speaker": 158,
    "cancelled": false,
    "proposal_base": 133,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 27,
  "fields": {
    "slot": null,
    "title": "Conversational interfaces for Chatbots and Artificial Intelligence",
    "description": "Attendees will see concepts for conversational interfaces used to create chatbots, and python libraries and code used to create them.  Conversational interfaces are increasingly becoming a preferred way for users to engage with information, offering a more personalized user experience. The ability to understand user\u2019s intent and take action makes it a good match for AI.",
    "description_html": "<p>Attendees will see concepts for conversational interfaces used to create chatbots, and python libraries and code used to create them.  Conversational interfaces are increasingly becoming a preferred way for users to engage with information, offering a more personalized user experience. The ability to understand user\u2019s intent and take action makes it a good match for AI.</p>",
    "abstract": "Attendees will get an understanding of key concepts for conversational interfaces which are used to create chatbots, as well as, some examples of the python libraries and code which can be used to create them.  \r\n\r\nConversational interfaces are increasingly becoming a preferred way for users to engage with information.  This is particularly true for younger users.  Conversational interfaces offer a more personalized user experience, as well as, a means to walk a user through a potentially complex series of requirements.\r\n\r\nThat ability to determine the user\u2019s intent, combined with the ability to step them through a series of relevant questions makes it particularly well suited for interfacing with artificial intelligence systems which often require precisely structured input to deliver meaningful insight.\r\n\r\nThe presentation will provide an overview of conversational interfaces, integration with front end communications channels, and back end artificial intelligence systems.  \r\n\r\nAn example will be shown which illustrates the end to end concepts covered. The presentation will use RASA Core, an open source Python machine learning based dialogue engine for conversational software, to show the process and benefits for training data on specific domains.   The example will show the framework integrated with Twitter and Facebook messenger as communications channels, and the ability to direct actions to multiple AI backends.",
    "abstract_html": "<p>Attendees will get an understanding of key concepts for conversational interfaces which are used to create chatbots, as well as, some examples of the python libraries and code which can be used to create them.  </p>\n<p>Conversational interfaces are increasingly becoming a preferred way for users to engage with information.  This is particularly true for younger users.  Conversational interfaces offer a more personalized user experience, as well as, a means to walk a user through a potentially complex series of requirements.</p>\n<p>That ability to determine the user\u2019s intent, combined with the ability to step them through a series of relevant questions makes it particularly well suited for interfacing with artificial intelligence systems which often require precisely structured input to deliver meaningful insight.</p>\n<p>The presentation will provide an overview of conversational interfaces, integration with front end communications channels, and back end artificial intelligence systems.  </p>\n<p>An example will be shown which illustrates the end to end concepts covered. The presentation will use RASA Core, an open source Python machine learning based dialogue engine for conversational software, to show the process and benefits for training data on specific domains.   The example will show the framework integrated with Twitter and Facebook messenger as communications channels, and the ability to direct actions to multiple AI backends.</p>",
    "speaker": 131,
    "cancelled": false,
    "proposal_base": 135,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 28,
  "fields": {
    "slot": null,
    "title": "Building a Twitter Metadata Scraper: Learnings from Working with a New Twitter API",
    "description": "BuzzFeed identified a need for Twitter to scrape our metadata more frequently, and worked with Twitter to build a new API that is currently in beta testing. In this talk I will go through the process of building a \"Twitter Scraper\" that accesses this new API. I will highlight various challenges encountered along the way, and show how I ultimately solved these problems.",
    "description_html": "<p>BuzzFeed identified a need for Twitter to scrape our metadata more frequently, and worked with Twitter to build a new API that is currently in beta testing. In this talk I will go through the process of building a \"Twitter Scraper\" that accesses this new API. I will highlight various challenges encountered along the way, and show how I ultimately solved these problems.</p>",
    "abstract": "BuzzFeed (especially our News team) creates a lot of time-sensitive content. But when shared on Twitter, the twitter-share data would remain fixed. This could lead to articles that changed from \"So-and-so leads in election\" to \"so and so won the election\" still being shared with an old title. BuzzFeed worked with Twitter on the development of a new API that could be used to rescrape the metadata to update share card information on request. I then built a \"twitter scraper\" using Python 3.5 that would request a rescrape every time we updated a published article. This proved especially tricky as existing twitter API support did not not quite fit our needs, requiring new solutions on our end. In this talk I'll go through the challenges involved in working with the new Twitter API and how I ultimately solved them.",
    "abstract_html": "<p>BuzzFeed (especially our News team) creates a lot of time-sensitive content. But when shared on Twitter, the twitter-share data would remain fixed. This could lead to articles that changed from \"So-and-so leads in election\" to \"so and so won the election\" still being shared with an old title. BuzzFeed worked with Twitter on the development of a new API that could be used to rescrape the metadata to update share card information on request. I then built a \"twitter scraper\" using Python 3.5 that would request a rescrape every time we updated a published article. This proved especially tricky as existing twitter API support did not not quite fit our needs, requiring new solutions on our end. In this talk I'll go through the challenges involved in working with the new Twitter API and how I ultimately solved them.</p>",
    "speaker": 136,
    "cancelled": false,
    "proposal_base": 140,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 29,
  "fields": {
    "slot": null,
    "title": "Containers without the magic",
    "description": "If you've ever seen a talk on containers or docker, it usually goes something like this: A \"hello world\" app is deployed and massively scaled up using some kind of magic framework or API. Nothing short of a magic trick, we usually feel impressed but have no idea what just happened. This talk is an intro to containers as explained by a Python dev for Python devs, without the magic tricks.",
    "description_html": "<p>If you've ever seen a talk on containers or docker, it usually goes something like this: A \"hello world\" app is deployed and massively scaled up using some kind of magic framework or API. Nothing short of a magic trick, we usually feel impressed but have no idea what just happened. This talk is an intro to containers as explained by a Python dev for Python devs, without the magic tricks.</p>",
    "abstract": "This talk is designed to explain container concepts in a way that is familiar to Python developers. We will *not* focus on specific frameworks or cloud services that help deploy containers. We *will* explain what containers are, how they work, and how to get started containerizing your app.\r\n\r\nWhat are containers?\r\n----------------------\r\n* What is a container.\r\n* Conceptual difference between running your app in a container versus \"normally\".\r\n* Pros and cons of container concepts.\r\n\r\nHow do containers work?\r\n---------------------------\r\n* Comparison to virtualenv.\r\n* Overview of LXC (Linux containers).\r\n* Overview of Docker.\r\n* How to shift your thinking from LAMP stack mentality to Docker mentality.\r\n\r\nContainerizing your app\r\n-------------------------\r\n* Treating new shiny syndrome: real-world use-cases why you should or shouldn't containerize your app.\r\n* Getting started checklist for dockerizing your existing python web app.",
    "abstract_html": "<p>This talk is designed to explain container concepts in a way that is familiar to Python developers. We will <em>not</em> focus on specific frameworks or cloud services that help deploy containers. We <em>will</em> explain what containers are, how they work, and how to get started containerizing your app.</p>\n<h2>What are containers?</h2>\n<ul>\n<li>What is a container.</li>\n<li>Conceptual difference between running your app in a container versus \"normally\".</li>\n<li>Pros and cons of container concepts.</li>\n</ul>\n<h2>How do containers work?</h2>\n<ul>\n<li>Comparison to virtualenv.</li>\n<li>Overview of LXC (Linux containers).</li>\n<li>Overview of Docker.</li>\n<li>How to shift your thinking from LAMP stack mentality to Docker mentality.</li>\n</ul>\n<h2>Containerizing your app</h2>\n<ul>\n<li>Treating new shiny syndrome: real-world use-cases why you should or shouldn't containerize your app.</li>\n<li>Getting started checklist for dockerizing your existing python web app.</li>\n</ul>",
    "speaker": 139,
    "cancelled": false,
    "proposal_base": 150,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 30,
  "fields": {
    "slot": null,
    "title": "Tracking the International Space Station in Django with Redis-Queue and RQ Scheduler",
    "description": "Have you ever looked up at the sky and wondered if the International Space Station was flying by at that moment? In this live coding adventure we will cover the basics of scheduling tasks with RQ in Django by building a web app that sends you text message notifications whenever the ISS passes by your location. Technologies covered will be the ISS Open Notify API, Twilio SMS, RQ, and RQ Scheduler.",
    "description_html": "<p>Have you ever looked up at the sky and wondered if the International Space Station was flying by at that moment? In this live coding adventure we will cover the basics of scheduling tasks with RQ in Django by building a web app that sends you text message notifications whenever the ISS passes by your location. Technologies covered will be the ISS Open Notify API, Twilio SMS, RQ, and RQ Scheduler.</p>",
    "abstract": "The international space station (ISS) is an orbital outpost circling high above our heads. Given a location on Earth (latitude, longitude) the ISS Open Notify API will compute the next `n` number of times that the ISS will be overhead. I will cover step by step how to build a web application that notifies users via text message when the ISS is passing over them. \r\n\r\nThis talk is live coded and will involve me switching between writing code in my text editor (vim), terminal windows and web browser. It is based off of a [tutorial post I wrote for the Twilio blog](https://www.twilio.com/blog/2015/11/international-space-station-notifications-with-python-redis-queue-and-twilio-copilot.html). \r\n\r\nIn this session, attendees will learn how to:\r\n- Access and interpret data from the [ISS Open Notify API](http://open-notify.org/Open-Notify-API/ISS-Pass-Times/) on the exact timing on when the ISS will next pass a given geolocation.\r\n- Use Redis Queue as a lightweight alternative to Celery for executing asynchronous tasks.\r\n- Use RQ Scheduler to schedule tasks to be performed at a specific datetime.\r\n- Integrate RQ and RQ Scheduler into a Django web application.\r\n- Respond to webhook requests with Django.\r\n- Access client-side geolocation data using JavaScript.\r\n- Send text message notifications using the Twilio SMS API.\r\n\r\nIn the Django app built during this talk, Redis will be used to store subscriber information such as a user's phone number and geolocation. RQ and RQ Scheduler will be used to execute a function that sends a text message notification using the Twilio API at a given datetime. \r\n\r\nAt the end of my talk, I will send a text message containing the code I wrote, and a walkthrough on how to get it running to all of the audience members who interacted with the live-coded web application from my session.",
    "abstract_html": "<p>The international space station (ISS) is an orbital outpost circling high above our heads. Given a location on Earth (latitude, longitude) the ISS Open Notify API will compute the next <code>n</code> number of times that the ISS will be overhead. I will cover step by step how to build a web application that notifies users via text message when the ISS is passing over them. </p>\n<p>This talk is live coded and will involve me switching between writing code in my text editor (vim), terminal windows and web browser. It is based off of a <a href=\"https://www.twilio.com/blog/2015/11/international-space-station-notifications-with-python-redis-queue-and-twilio-copilot.html\">tutorial post I wrote for the Twilio blog</a>. </p>\n<p>In this session, attendees will learn how to:\n- Access and interpret data from the <a href=\"http://open-notify.org/Open-Notify-API/ISS-Pass-Times/\">ISS Open Notify API</a> on the exact timing on when the ISS will next pass a given geolocation.\n- Use Redis Queue as a lightweight alternative to Celery for executing asynchronous tasks.\n- Use RQ Scheduler to schedule tasks to be performed at a specific datetime.\n- Integrate RQ and RQ Scheduler into a Django web application.\n- Respond to webhook requests with Django.\n- Access client-side geolocation data using JavaScript.\n- Send text message notifications using the Twilio SMS API.</p>\n<p>In the Django app built during this talk, Redis will be used to store subscriber information such as a user's phone number and geolocation. RQ and RQ Scheduler will be used to execute a function that sends a text message notification using the Twilio API at a given datetime. </p>\n<p>At the end of my talk, I will send a text message containing the code I wrote, and a walkthrough on how to get it running to all of the audience members who interacted with the live-coded web application from my session.</p>",
    "speaker": 144,
    "cancelled": false,
    "proposal_base": 153,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 32,
  "fields": {
    "slot": null,
    "title": "A Hands-On Guide to Teaching Programming with GitHub, Travis CI, and Python",
    "description": "Have you ever wanted to teach a room full of students or your colleagues? It\r\nturns out that it is difficult to setup the infrastructure needed to deliver source code\r\nand documentation and then assess submissions! Suitable for full-time educators\r\nand industrialists who instruct their colleagues, this talk explains how you can teach \r\nprogramming using GitHub Classroom, Travis CI, and Python.",
    "description_html": "<p>Have you ever wanted to teach a room full of students or your colleagues? It\nturns out that it is difficult to setup the infrastructure needed to deliver source code\nand documentation and then assess submissions! Suitable for full-time educators\nand industrialists who instruct their colleagues, this talk explains how you can teach \nprogramming using GitHub Classroom, Travis CI, and Python.</p>",
    "abstract": "Real-world software engineering is collaborative, commonly involving the use of\r\nGit, GitHub, and continuous integration with Travis CI. Suitable for both\r\nfull-time educators and members of industry who educate their peers, this\r\npresentation will explain how to use these technologies and platforms to teach\r\ninterdisciplinary and introductory courses in computer programming and software\r\nengineering.\r\n\r\nThe presentation will first show how to create a GitHub organization connected\r\nto a GitHub Classroom with unlimited private repositories that contain\r\ninstructor solutions and starter kits and assignment submissions from both\r\nindividual and team-based programming assignments. The talk will next explain\r\nhow to connect GitHub repositories to continuous integration servers hosted by\r\nTravis CI, thus supporting the cloud-based execution of tests and checks.\r\n\r\nThe presentation will subsequently introduce a Python program that supports the\r\nlocal and cloud-based checking of a student's source code and technical writing\r\nfor a programming project. Ultimately, people who attend this talk will learn\r\nmore about how to use open-source software and the Python programming language\r\nto effectively deliver instructional materials and assess assignment\r\nsubmissions.",
    "abstract_html": "<p>Real-world software engineering is collaborative, commonly involving the use of\nGit, GitHub, and continuous integration with Travis CI. Suitable for both\nfull-time educators and members of industry who educate their peers, this\npresentation will explain how to use these technologies and platforms to teach\ninterdisciplinary and introductory courses in computer programming and software\nengineering.</p>\n<p>The presentation will first show how to create a GitHub organization connected\nto a GitHub Classroom with unlimited private repositories that contain\ninstructor solutions and starter kits and assignment submissions from both\nindividual and team-based programming assignments. The talk will next explain\nhow to connect GitHub repositories to continuous integration servers hosted by\nTravis CI, thus supporting the cloud-based execution of tests and checks.</p>\n<p>The presentation will subsequently introduce a Python program that supports the\nlocal and cloud-based checking of a student's source code and technical writing\nfor a programming project. Ultimately, people who attend this talk will learn\nmore about how to use open-source software and the Python programming language\nto effectively deliver instructional materials and assess assignment\nsubmissions.</p>",
    "speaker": 149,
    "cancelled": false,
    "proposal_base": 165,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 33,
  "fields": {
    "slot": null,
    "title": "An Intuitive Grasp of RegEx\u2019s in Python",
    "description": "Regular expressions are used to define search patterns. Python provides regular expressions via the built in \u2018re\u2019 module, but they are hard to read, write, and understand. This talk will give you two tools conquer regex\u2019s, a mental model, (demonstrated with props), of how they work, and a mini-language, \u201cSimple Regex Language\u201d, to create readable regex\u2019s that easily translate into Python regex's.",
    "description_html": "<p>Regular expressions are used to define search patterns. Python provides regular expressions via the built in \u2018re\u2019 module, but they are hard to read, write, and understand. This talk will give you two tools conquer regex\u2019s, a mental model, (demonstrated with props), of how they work, and a mini-language, \u201cSimple Regex Language\u201d, to create readable regex\u2019s that easily translate into Python regex's.</p>",
    "abstract": "## Overview & Purpose\r\n\r\nRegular expressions are used to define search patterns and are an important technique for validating data, scraping data, data wrangling, (i.e re-formatting.), the content of strings.  Additionally, the\u2019re used to enable syntax highlighting in some applications.  Python provides regular expressions via the built in \u2018re\u2019 module, and there is a third party \u2018regex\u2019 module with added functionality.\r\nThe problem is, writing regex patterns to do what you want is hard, and even when you\u2019ve got one, figuring out what it is or isn\u2019t going to match can be baffling.\r\nThis talk will give you two tools conquer regex\u2019s, a mental model, (demonstrated with props), of how they work, and a mini-language, \u201cSimple Regex Language\u201d, to create readable regex\u2019s that easily translate into Python\u2019s regex syntax.\r\n\r\n## A Physical Model of RegEx\u2019s\r\n\r\n1. Picture the string we are searching as a line of tiles, (like those in scrabble), where the character each represent has been routed into its surface.\r\n2. This lets us talk about the two categories of places a regex start or continue a match:\r\n   1. At a character specified in the regex: (modeled by a vacuum-formed sheet of plastic whose profile can nest in the character\u2019s incised relief).\r\n   2. At a position called an anchor, specified in the regex: (represented by the insertion of a strip of plastic into the crack between tiles)\r\n      1. Note: whether a give \u2018crack\u2019 matches the given anchor is determined by what is to its left and right; more specifically, the categories they belong to, i.e. whitespace, printable, alphabetic, numeric, eol,  buffer-wall, etc.\r\n3. This model lets us illustrate how the regex engine goes about making a match; e.g., if our pattern wants to match \u2018ABC\u2019, and our string contains \u2018ABD\u2019, we slide along a piece of plastic with a  \u2018A\u2019 profile, from the start of the buffer to where we encounter the \u2018A\u2019 tile. The plastic will sink into \u2018A\u2019 tile, allowing us to swing down \u2018B\u2019 plastic that is taped the the right edge of \u2018A\u2019 overlay which also sinks down flush matching the \u2018B\u2019 tile.  When we try to swing down the next taped on plastic overlay, \u2018C\u2019, it crashes into the surface of the \u2018D\u2019 tile and instead levers out the \u2018B\u2019 overlay, which levers out the \u2018A\u2019 overlay and gets us back to sliding along the \u2018A\u2019 overlay looking for the next place to pause and try for a match.\r\n4. At this point we introduce SRL, (below), then show how its patterns translate into Python regex\u2019s, then we return to this model and extend it to cover all the different regex \u2018atoms\u2019 we can now write.\r\n5. This \u201cTile and Overlay\u201d model provides a visual metaphor to see how the regex engine works, but there are no tiles and overlay chains in the computer, there are only strings of bytes and double-bytes, (if we are talking UTF-8), so we briefly introduce a model that use height to represent characters.  This lets us talk about Unicode strings, and hints at the kind of optimizations compiling regex\u2019s might allow Python to do.\r\n6. For the presentation, there will be a physical model to show the example in covered in point three above, but to make things manageable, we'll then switch to illustrations done in Skecthup, (maybe even animations).\r\n\r\n## SRL: Simple Regex Language\r\n\r\n1. SRL is what is known as a \u201cLittle Language\u201d, or a \u201cDomain Specific Language\u201d which are built to handle a small problem area.  In SRL\u2019s case, the problem is that of the unreadability of regex\u2019s, and that each language has a different way of writing them.\r\n   1. You\u2019d think we could skip this as we are only concerned with Python here, but it is useful to have this level of abstraction, even if you only do Python. You are likely to find that your editor uses a different flavor of regex\u2019s.\r\n1. An overview, live demos, and documentation can be found at the project\u2019s website, <https://simple-regex.com>.  I won\u2019t duplicate them here,I\u2019ll just say that the exposition of what we need for this talk will follow this source material, and include a SRL to Python cheat sheet that covers their translation and how they are expressed in the \u201cTile and Overlay\u201d model.\r\n1. To give reviewers a feel for what the illustration of SRL will look like, I intend either add them to the proposal, or provide a link to them on my github so you can look at them as they are created for this talk.",
    "abstract_html": "<h2>Overview &amp; Purpose</h2>\n<p>Regular expressions are used to define search patterns and are an important technique for validating data, scraping data, data wrangling, (i.e re-formatting.), the content of strings.  Additionally, the\u2019re used to enable syntax highlighting in some applications.  Python provides regular expressions via the built in \u2018re\u2019 module, and there is a third party \u2018regex\u2019 module with added functionality.\nThe problem is, writing regex patterns to do what you want is hard, and even when you\u2019ve got one, figuring out what it is or isn\u2019t going to match can be baffling.\nThis talk will give you two tools conquer regex\u2019s, a mental model, (demonstrated with props), of how they work, and a mini-language, \u201cSimple Regex Language\u201d, to create readable regex\u2019s that easily translate into Python\u2019s regex syntax.</p>\n<h2>A Physical Model of RegEx\u2019s</h2>\n<ol>\n<li>Picture the string we are searching as a line of tiles, (like those in scrabble), where the character each represent has been routed into its surface.</li>\n<li>This lets us talk about the two categories of places a regex start or continue a match:</li>\n<li>At a character specified in the regex: (modeled by a vacuum-formed sheet of plastic whose profile can nest in the character\u2019s incised relief).</li>\n<li>At a position called an anchor, specified in the regex: (represented by the insertion of a strip of plastic into the crack between tiles)<ol>\n<li>Note: whether a give \u2018crack\u2019 matches the given anchor is determined by what is to its left and right; more specifically, the categories they belong to, i.e. whitespace, printable, alphabetic, numeric, eol,  buffer-wall, etc.</li>\n</ol>\n</li>\n<li>This model lets us illustrate how the regex engine goes about making a match; e.g., if our pattern wants to match \u2018ABC\u2019, and our string contains \u2018ABD\u2019, we slide along a piece of plastic with a  \u2018A\u2019 profile, from the start of the buffer to where we encounter the \u2018A\u2019 tile. The plastic will sink into \u2018A\u2019 tile, allowing us to swing down \u2018B\u2019 plastic that is taped the the right edge of \u2018A\u2019 overlay which also sinks down flush matching the \u2018B\u2019 tile.  When we try to swing down the next taped on plastic overlay, \u2018C\u2019, it crashes into the surface of the \u2018D\u2019 tile and instead levers out the \u2018B\u2019 overlay, which levers out the \u2018A\u2019 overlay and gets us back to sliding along the \u2018A\u2019 overlay looking for the next place to pause and try for a match.</li>\n<li>At this point we introduce SRL, (below), then show how its patterns translate into Python regex\u2019s, then we return to this model and extend it to cover all the different regex \u2018atoms\u2019 we can now write.</li>\n<li>This \u201cTile and Overlay\u201d model provides a visual metaphor to see how the regex engine works, but there are no tiles and overlay chains in the computer, there are only strings of bytes and double-bytes, (if we are talking UTF-8), so we briefly introduce a model that use height to represent characters.  This lets us talk about Unicode strings, and hints at the kind of optimizations compiling regex\u2019s might allow Python to do.</li>\n<li>For the presentation, there will be a physical model to show the example in covered in point three above, but to make things manageable, we'll then switch to illustrations done in Skecthup, (maybe even animations).</li>\n</ol>\n<h2>SRL: Simple Regex Language</h2>\n<ol>\n<li>SRL is what is known as a \u201cLittle Language\u201d, or a \u201cDomain Specific Language\u201d which are built to handle a small problem area.  In SRL\u2019s case, the problem is that of the unreadability of regex\u2019s, and that each language has a different way of writing them.</li>\n<li>You\u2019d think we could skip this as we are only concerned with Python here, but it is useful to have this level of abstraction, even if you only do Python. You are likely to find that your editor uses a different flavor of regex\u2019s.</li>\n<li>An overview, live demos, and documentation can be found at the project\u2019s website, <a href=\"https://simple-regex.com\">https://simple-regex.com</a>.  I won\u2019t duplicate them here,I\u2019ll just say that the exposition of what we need for this talk will follow this source material, and include a SRL to Python cheat sheet that covers their translation and how they are expressed in the \u201cTile and Overlay\u201d model.</li>\n<li>To give reviewers a feel for what the illustration of SRL will look like, I intend either add them to the proposal, or provide a link to them on my github so you can look at them as they are created for this talk.</li>\n</ol>",
    "speaker": 115,
    "cancelled": false,
    "proposal_base": 167,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 34,
  "fields": {
    "slot": null,
    "title": "Going Passwordless",
    "description": "Passwords suck. They're often weak and reused, making them one of the least secure parts of web applications. This is such a problem that entire industries of password managers and two-factor authentication products have popped up as extra layers of security. To really address this issue and make our users and products more secure, we need a more fundamental change.",
    "description_html": "<p>Passwords suck. They're often weak and reused, making them one of the least secure parts of web applications. This is such a problem that entire industries of password managers and two-factor authentication products have popped up as extra layers of security. To really address this issue and make our users and products more secure, we need a more fundamental change.</p>",
    "abstract": "- The problem with passwords\r\n    - Flaws in how passwords are used today\r\n    - Some real life examples of how passwords fail us\r\n\r\n- Past attempts to fix this (and their issues)\r\n    - SSL/TLS client certificates\r\n    - Single sign on providers\r\n    - Biometrics\r\n\r\n- Better approaches (and their implementations)\r\n    - Magic links (email-based authentication)\r\n    - Hardware tokens\r\n    - WebAuthn\r\n\r\n- Putting it all together\r\n    - A quick tour of the `py_webauthn` library\r\n    - Building a custom Django authentication workflow with these concepts\r\n\r\n- Pros and cons\r\n    - Advantages over conventional password-based authentication\r\n    - Barriers to implementing this today and how to overcome them\r\n\r\n- Conclusion",
    "abstract_html": "<ul>\n<li>\n<p>The problem with passwords</p>\n<ul>\n<li>Flaws in how passwords are used today</li>\n<li>Some real life examples of how passwords fail us</li>\n</ul>\n</li>\n<li>\n<p>Past attempts to fix this (and their issues)</p>\n<ul>\n<li>SSL/TLS client certificates</li>\n<li>Single sign on providers</li>\n<li>Biometrics</li>\n</ul>\n</li>\n<li>\n<p>Better approaches (and their implementations)</p>\n<ul>\n<li>Magic links (email-based authentication)</li>\n<li>Hardware tokens</li>\n<li>WebAuthn</li>\n</ul>\n</li>\n<li>\n<p>Putting it all together</p>\n<ul>\n<li>A quick tour of the <code>py_webauthn</code> library</li>\n<li>Building a custom Django authentication workflow with these concepts</li>\n</ul>\n</li>\n<li>\n<p>Pros and cons</p>\n<ul>\n<li>Advantages over conventional password-based authentication</li>\n<li>Barriers to implementing this today and how to overcome them</li>\n</ul>\n</li>\n<li>\n<p>Conclusion</p>\n</li>\n</ul>",
    "speaker": 138,
    "cancelled": false,
    "proposal_base": 173,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 35,
  "fields": {
    "slot": null,
    "title": "Guide to Software Engineering for Visually Impaired",
    "description": "We will look into a day in the life of a Software Engineer with limited vision to Understand their difficulties at work and how they can overcome those difficulties to become successful in their role.",
    "description_html": "<p>We will look into a day in the life of a Software Engineer with limited vision to Understand their difficulties at work and how they can overcome those difficulties to become successful in their role.</p>",
    "abstract": "I am a backend Software Engineer at Yelp who uses Python extensively for building Yelps infrastructure and internal tools. I also suffer from a genetic disorder called Albinism which often results in limited visual acuity that can range from 20/120 to 20/200 in most common cases. With such a low vision it's extremely difficult to read the computer screen without the use of on-screen magnifiers. In this talk, we will see how a person with adverse visual acuity can thrive and be successful in the field of Software Engineering. We will address the importance and meaning of accessibility for Software Engineers with partial vision and recommend some best practices that are available today. We will also talk about the importance of an inclusive work culture that can help foster creativity and ease ramp up for a Software Engineer with a disability.",
    "abstract_html": "<p>I am a backend Software Engineer at Yelp who uses Python extensively for building Yelps infrastructure and internal tools. I also suffer from a genetic disorder called Albinism which often results in limited visual acuity that can range from 20/120 to 20/200 in most common cases. With such a low vision it's extremely difficult to read the computer screen without the use of on-screen magnifiers. In this talk, we will see how a person with adverse visual acuity can thrive and be successful in the field of Software Engineering. We will address the importance and meaning of accessibility for Software Engineers with partial vision and recommend some best practices that are available today. We will also talk about the importance of an inclusive work culture that can help foster creativity and ease ramp up for a Software Engineer with a disability.</p>",
    "speaker": 152,
    "cancelled": false,
    "proposal_base": 175,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 36,
  "fields": {
    "slot": null,
    "title": "Creating an IoT Baseball Scoreboard with Python",
    "description": "This talk covers the intersection of hardware, software, peanuts and cracker jacks. I'll share how I built an IoT baseball scoreboard using readily available hardware and software written in Python. I hope anyone who attends this talk will be entertained, learn some new things and leave feeling empowered to make their own IoT (field of) dreams come true.",
    "description_html": "<p>This talk covers the intersection of hardware, software, peanuts and cracker jacks. I'll share how I built an IoT baseball scoreboard using readily available hardware and software written in Python. I hope anyone who attends this talk will be entertained, learn some new things and leave feeling empowered to make their own IoT (field of) dreams come true.</p>",
    "abstract": "This talk will cover the hardware, code and libraries I used to build a digital baseball scoreboard for tracking my favorite MLB team.  If sports aren't your thing, that's OK - there will be plenty of information applicable to other IoT/maker projects.\r\n\r\nI'll cover use of the threading, queue and sched modules from the standard library. I'll also share how I used the mlbgame and gpiozero libraries. Finally, as a novice hardware hacker myself, I'll share what I've learned about hardware hacking including soldering tips, useful equipment, etc.\r\n\r\n* The Scoreboard Project\r\n* 7-segment displays\r\n* Shift registers\r\n* Transistors and multiplexing\r\n* Soldering\r\n* Raspberry Pi Zero W and gpiozero\r\n* MLB API and the mlbgame package\r\n* sched, threading and queue(s) (oh my!)\r\n* Opening Day\r\n* Future Directions",
    "abstract_html": "<p>This talk will cover the hardware, code and libraries I used to build a digital baseball scoreboard for tracking my favorite MLB team.  If sports aren't your thing, that's OK - there will be plenty of information applicable to other IoT/maker projects.</p>\n<p>I'll cover use of the threading, queue and sched modules from the standard library. I'll also share how I used the mlbgame and gpiozero libraries. Finally, as a novice hardware hacker myself, I'll share what I've learned about hardware hacking including soldering tips, useful equipment, etc.</p>\n<ul>\n<li>The Scoreboard Project</li>\n<li>7-segment displays</li>\n<li>Shift registers</li>\n<li>Transistors and multiplexing</li>\n<li>Soldering</li>\n<li>Raspberry Pi Zero W and gpiozero</li>\n<li>MLB API and the mlbgame package</li>\n<li>sched, threading and queue(s) (oh my!)</li>\n<li>Opening Day</li>\n<li>Future Directions</li>\n</ul>",
    "speaker": 153,
    "cancelled": false,
    "proposal_base": 176,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 37,
  "fields": {
    "slot": null,
    "title": "Smart and Simple Data Driven Hydroponic Sensing Applications Using Python, Flask & Raspberry Pi",
    "description": "The brilliantly conceived and executed Raspberry Pi platform is a wonderful tool for developing simple, cost effective, self-contained sensor-driven applications using Python, Flask and a little bit of ingenuity.  This presentation is aimed at beginning to mid-level hobbyist with modest python skills or serious python programmers interested in hydroponics sensors.",
    "description_html": "<p>The brilliantly conceived and executed Raspberry Pi platform is a wonderful tool for developing simple, cost effective, self-contained sensor-driven applications using Python, Flask and a little bit of ingenuity.  This presentation is aimed at beginning to mid-level hobbyist with modest python skills or serious python programmers interested in hydroponics sensors.</p>",
    "abstract": "My intent is to present for 3-45 minutes with the primary focus on explaining the pieces and parts of the system, how they come together and working through the code to build a data driven flask application which monitors and records information about a home hydroponic garden autonomously.\r\n\r\nAlthough most of the presentation will be a guided tour of the project from beginning to end, there will be hands on demonstrations of the code, including the launching of the flask application and as well as code supporting the graphical plotting of a live data stream. \r\n\r\nA major component of this presentation will be the problem-solving process involved in executing a small-scale IoT project from beginning to end, with humbling tails of failure and rebirth while maintaining a clear and present focus on Python, Flask and the Raspberry Pi sensor platform as a vehicle for building development skills.\r\n\r\nFor a novice programmer this could serve as a first introduction to simple object-oriented programming, module building and IoT integration in a compact package that most dedicated hobbyists could accomplish. It should also, because of the variety in content and application, be interesting to Python enthusiast of varied skill levels who find geeky home projects irresistible. \r\n\r\nAs is always the case with my presentations, the absurd could happen, and I am shameless about finding humor in my own epic failures, so it might just be amusing. And because I have extensive classroom experience, I can be both patient and engaging even when a live experiment goes awry.  \r\n\r\nSupporting Materials to be Posted on Github:\r\n\r\nFull Parts List (with links to vendors)\r\nStep-by-step instructions Including:\r\n\r\nPhotographs of Key Steps\r\nFull Code Files, with Useful Comments\r\nA Data Dictionary \r\nDocumentation About Major Decisions\r\nA Bibliography of Resources (both mechanical and programming)\r\nBlueprints for a Simple Hydroponic System",
    "abstract_html": "<p>My intent is to present for 3-45 minutes with the primary focus on explaining the pieces and parts of the system, how they come together and working through the code to build a data driven flask application which monitors and records information about a home hydroponic garden autonomously.</p>\n<p>Although most of the presentation will be a guided tour of the project from beginning to end, there will be hands on demonstrations of the code, including the launching of the flask application and as well as code supporting the graphical plotting of a live data stream. </p>\n<p>A major component of this presentation will be the problem-solving process involved in executing a small-scale IoT project from beginning to end, with humbling tails of failure and rebirth while maintaining a clear and present focus on Python, Flask and the Raspberry Pi sensor platform as a vehicle for building development skills.</p>\n<p>For a novice programmer this could serve as a first introduction to simple object-oriented programming, module building and IoT integration in a compact package that most dedicated hobbyists could accomplish. It should also, because of the variety in content and application, be interesting to Python enthusiast of varied skill levels who find geeky home projects irresistible. </p>\n<p>As is always the case with my presentations, the absurd could happen, and I am shameless about finding humor in my own epic failures, so it might just be amusing. And because I have extensive classroom experience, I can be both patient and engaging even when a live experiment goes awry.  </p>\n<p>Supporting Materials to be Posted on Github:</p>\n<p>Full Parts List (with links to vendors)\nStep-by-step instructions Including:</p>\n<p>Photographs of Key Steps\nFull Code Files, with Useful Comments\nA Data Dictionary \nDocumentation About Major Decisions\nA Bibliography of Resources (both mechanical and programming)\nBlueprints for a Simple Hydroponic System</p>",
    "speaker": 155,
    "cancelled": false,
    "proposal_base": 177,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 38,
  "fields": {
    "slot": 1,
    "title": "Natural Language Processing in Python",
    "description": "As a data scientist, we are known to crunch numbers, but what happens when we run into text data? In this tutorial, I will walk through the steps to turn text data into a format that a machine can understand, share some of the most popular text analytics techniques, and showcase several natural language processing (NLP) libraries in Python including NLTK, TextBlob, spaCy and gensim.",
    "description_html": "<p>As a data scientist, we are known to crunch numbers, but what happens when we run into text data? In this tutorial, I will walk through the steps to turn text data into a format that a machine can understand, share some of the most popular text analytics techniques, and showcase several natural language processing (NLP) libraries in Python including NLTK, TextBlob, spaCy and gensim.</p>",
    "abstract": "Natural language processing (NLP) is an exciting branch of artificial intelligence (AI) that allows machines to break down and understand human language. As a data scientist, I often use NLP techniques to interpret text data that I'm working with for my analysis. During this tutorial, I plan to walk through text pre-processing techniques, machine learning techniques and Python libraries for NLP.\r\n\r\nText pre-processing techniques include tokenization, text normalization and data cleaning. Once in a standard format, various machine learning techniques can be applied to better understand the data. This includes using popular modeling techniques to classify emails as spam or not, or to score the sentiment of a tweet on Twitter. Newer, more complex techniques can also be used such as topic modeling, word embeddings or text generation with deep learning.\r\n\r\nWe will walk through an example in Jupyter Notebook that goes through all of the steps of a text analysis project, using several NLP libraries in Python including NLTK, TextBlob, spaCy and gensim along with the standard machine learning libraries including pandas and scikit-learn.",
    "abstract_html": "<p>Natural language processing (NLP) is an exciting branch of artificial intelligence (AI) that allows machines to break down and understand human language. As a data scientist, I often use NLP techniques to interpret text data that I'm working with for my analysis. During this tutorial, I plan to walk through text pre-processing techniques, machine learning techniques and Python libraries for NLP.</p>\n<p>Text pre-processing techniques include tokenization, text normalization and data cleaning. Once in a standard format, various machine learning techniques can be applied to better understand the data. This includes using popular modeling techniques to classify emails as spam or not, or to score the sentiment of a tweet on Twitter. Newer, more complex techniques can also be used such as topic modeling, word embeddings or text generation with deep learning.</p>\n<p>We will walk through an example in Jupyter Notebook that goes through all of the steps of a text analysis project, using several NLP libraries in Python including NLTK, TextBlob, spaCy and gensim along with the standard machine learning libraries including pandas and scikit-learn.</p>",
    "speaker": 90,
    "cancelled": false,
    "proposal_base": 83,
    "section": 2
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 39,
  "fields": {
    "slot": 5,
    "title": "Welcome to CircuitPython!",
    "description": "CircuitPython is Python that runs on microcontroller boards, and is designed to make learning programming and electronics super simple. This tutorial will introduce participants to CircuitPython, using the Circuit Playground Express, an all-in-one microcontroller board with sensors, lights and switches built in. They will learn the basics and build up to a final project.",
    "description_html": "<p>CircuitPython is Python that runs on microcontroller boards, and is designed to make learning programming and electronics super simple. This tutorial will introduce participants to CircuitPython, using the Circuit Playground Express, an all-in-one microcontroller board with sensors, lights and switches built in. They will learn the basics and build up to a final project.</p>",
    "abstract": "CircuitPython is Python that runs on microcontrollers. It's designed for learning and it's super simple to use. If you're new to programming or electronics, CircuitPython can help you get started with both. All you need to do is plug in a microcontroller board, open any code editor, and start editing. Participants will be provided with a Circuit Playground Express microcontroller board to use. We will be using Mu as our code editor - Mu is an editor that has the serial REPL and a plotter built in, and makes getting started with CircuitPython quite easy. This beginner-friendly tutorial will cover what CircuitPython is and why you would use it. I will discuss the community built around CircuitPython and the compatible hardware. Then we'll cover how to install and update CircuitPython on the Circuit Playground Express board, creating and editing code, installing Mu, the serial console and the REPL, and how to install libraries. Then we will begin working with code. There will be a series of examples that utilise the various sensors, lights and switches built into the Circuit Playground Express board. We will start simply with the CircuitPython \"Hello, world!\" Then we will use the plotter in Mu to graph the data live from a few of the sensors. Next, we'll begin exploring the various other inputs and sensors on the board. From there, we'll build on the concepts learned, combining them as we go to eventually build a light up, capacitive touch tone piano. All code will be provided on [GitHub](https://github.com/kattni/pyohio_2018_cp).",
    "abstract_html": "<p>CircuitPython is Python that runs on microcontrollers. It's designed for learning and it's super simple to use. If you're new to programming or electronics, CircuitPython can help you get started with both. All you need to do is plug in a microcontroller board, open any code editor, and start editing. Participants will be provided with a Circuit Playground Express microcontroller board to use. We will be using Mu as our code editor - Mu is an editor that has the serial REPL and a plotter built in, and makes getting started with CircuitPython quite easy. This beginner-friendly tutorial will cover what CircuitPython is and why you would use it. I will discuss the community built around CircuitPython and the compatible hardware. Then we'll cover how to install and update CircuitPython on the Circuit Playground Express board, creating and editing code, installing Mu, the serial console and the REPL, and how to install libraries. Then we will begin working with code. There will be a series of examples that utilise the various sensors, lights and switches built into the Circuit Playground Express board. We will start simply with the CircuitPython \"Hello, world!\" Then we will use the plotter in Mu to graph the data live from a few of the sensors. Next, we'll begin exploring the various other inputs and sensors on the board. From there, we'll build on the concepts learned, combining them as we go to eventually build a light up, capacitive touch tone piano. All code will be provided on <a href=\"https://github.com/kattni/pyohio_2018_cp\">GitHub</a>.</p>",
    "speaker": 99,
    "cancelled": false,
    "proposal_base": 97,
    "section": 2
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 40,
  "fields": {
    "slot": 2,
    "title": "A Beginner's Guide to Tackling Recursion",
    "description": "Between unintelligble algorithms and beautiful fractal artwork, recursion has an intimidating and even mystical reputation. But the underlying ideas behind it are simple. In this tutorial we get a solid foundation of recursive code, and run through several examples in the interactive shell. If you've ever said or thought the words \"recursion is confusing\", this tutorial is for you.",
    "description_html": "<p>Between unintelligble algorithms and beautiful fractal artwork, recursion has an intimidating and even mystical reputation. But the underlying ideas behind it are simple. In this tutorial we get a solid foundation of recursive code, and run through several examples in the interactive shell. If you've ever said or thought the words \"recursion is confusing\", this tutorial is for you.</p>",
    "abstract": "Recursion has an intimidating reputation for being the advanced skill of coding sorcerers. But in this tutorial we look behind the curtain of this formidable technique to discover the simple ideas under it.\r\n\r\nIf you've ever said or thought the words \"recursion is confusing\", this tutorial is for you.\r\n\r\nThrough hands-on exercises in the interactive shell, we'll answer the following questions:\r\n\r\n* What is recursion, and when is it a good idea and bad idea to use it?\r\n* What are all the confusing ways that recursion is commonly taught?\r\n* What's a stack, and what's the call stack?\r\n* What are stack overflows, and how do we avoid them?\r\n* Do some problems require recursion? How do I transform recursive code into iterative code, and vice versa?\r\n* What are some common recusive problems in whiteboard coding interviews?\r\n* What is memoization and tail call optimization?\r\n* How do I draw that cool-looking fractal artwork using recursion?\r\n\r\nWe'll cover a number of common recursive algorithms:\r\n\r\n* Factorial and Fibonacci calculation\r\n* Exponent calculation\r\n* The Towers of Hanoi\r\n* The flood fill algorithm\r\n* Binary search\r\n* Generating permutations and combinations\r\n\r\nThis tutorial is for a wide range of developers. Beginners who only understand the basics of Python will be able to follow along. Experienced developers who have hoped no one would notice the recursive-coding gap in their knowledge will be able to breath with relief after taking this tutorial. All that is required is a willingness to learn, and a willingness to have the willingness to learn, and a willingness to have the willingness to have the willingness to learn, and... so on.",
    "abstract_html": "<p>Recursion has an intimidating reputation for being the advanced skill of coding sorcerers. But in this tutorial we look behind the curtain of this formidable technique to discover the simple ideas under it.</p>\n<p>If you've ever said or thought the words \"recursion is confusing\", this tutorial is for you.</p>\n<p>Through hands-on exercises in the interactive shell, we'll answer the following questions:</p>\n<ul>\n<li>What is recursion, and when is it a good idea and bad idea to use it?</li>\n<li>What are all the confusing ways that recursion is commonly taught?</li>\n<li>What's a stack, and what's the call stack?</li>\n<li>What are stack overflows, and how do we avoid them?</li>\n<li>Do some problems require recursion? How do I transform recursive code into iterative code, and vice versa?</li>\n<li>What are some common recusive problems in whiteboard coding interviews?</li>\n<li>What is memoization and tail call optimization?</li>\n<li>How do I draw that cool-looking fractal artwork using recursion?</li>\n</ul>\n<p>We'll cover a number of common recursive algorithms:</p>\n<ul>\n<li>Factorial and Fibonacci calculation</li>\n<li>Exponent calculation</li>\n<li>The Towers of Hanoi</li>\n<li>The flood fill algorithm</li>\n<li>Binary search</li>\n<li>Generating permutations and combinations</li>\n</ul>\n<p>This tutorial is for a wide range of developers. Beginners who only understand the basics of Python will be able to follow along. Experienced developers who have hoped no one would notice the recursive-coding gap in their knowledge will be able to breath with relief after taking this tutorial. All that is required is a willingness to learn, and a willingness to have the willingness to learn, and a willingness to have the willingness to have the willingness to learn, and... so on.</p>",
    "speaker": 128,
    "cancelled": false,
    "proposal_base": 138,
    "section": 2
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 41,
  "fields": {
    "slot": 6,
    "title": "Intro to Automation Using StackStorm and Python",
    "description": "StackStorm is an event-driven automation platform written in Python with a\r\nmission to help solve modern development, operations and system integration\r\nchallenges (think IFTTT for DevOps). This talk will provide an introduction to\r\nStackStorm, discussing its extremely powerful event-driven architecture. We will\r\ndemonstrate taking an existing Python script and inserting it into\r\nStackStorm.",
    "description_html": "<p>StackStorm is an event-driven automation platform written in Python with a\nmission to help solve modern development, operations and system integration\nchallenges (think IFTTT for DevOps). This talk will provide an introduction to\nStackStorm, discussing its extremely powerful event-driven architecture. We will\ndemonstrate taking an existing Python script and inserting it into\nStackStorm.</p>",
    "abstract": "* Abstract\r\n\r\nPython is an amazing language that allows developers to accomplish tasks quickly.\r\nStackStorm is an even-driven automation platform that enables developers and \r\noperations to take their Python scripts to the next level. \r\n\r\nFirst we will learn about the StackStorm platform and its building blocks:\r\nactions, workflows, sensors, triggers and rules. \r\n\r\nSecond we will discuss how these building blocks are tied together using \r\nStackStorms event bus.\r\n\r\nFinally we will demonstrate some of the amazing capabilities we're able to \r\nrealize once a Python script is brought into the StackStorm ecosystem such as:\r\nautomatically invoking the script when an event occurs in an external system,\r\ninvoking the script via the API, or invoking the script via Slack.\r\n\r\n\r\n* Outline\r\n - About myself [1 minute]\r\n - StackStorm intro [5 minutes]\r\n   - automation platform\r\n   - event driven\r\n   - everything is code\r\n   - everything available via the API\r\n   - everything available via the CLI\r\n - StackStorm Actions [10 minutes]\r\n   - what is an action [1 minute]\r\n   - create a metadata file [3 minutes]\r\n   - convert our python script [5 minutes]\r\n   - run it via the CLI [1 minute]\r\n     - show how st2 CLI writes curl commands for the API in debug mode\r\n - StackStorm ChatOps [10 minutes]\r\n   - what is ChatOps [1 minute]\r\n   - create a alias for our action [7 minutes]\r\n   - demo execution of the alias in Slack [2 minutes]\r\n - Questions [4 minutes]\r\n\r\n - If there's time (if i get a 40 or 120 minute slot)\r\n   - Packs\r\n     - collection of artifacts (actions, aliases, workflows, rules, etc)\r\n     - github repo\r\n     - requirements.txt for python dependencies\r\n   - Webhooks\r\n     - create a webhook rule\r\n     - invoke the webhook via curl\r\n   - Workflows\r\n     - mistral\r\n     - composable actions\r\n     - passing data between actions\r\n     - handling errors\r\n   - Datastore\r\n     - read/write data\r\n     - secret keys\r\n     - reading in data in an action\r\n     - reading in data in a workflow",
    "abstract_html": "<ul>\n<li>Abstract</li>\n</ul>\n<p>Python is an amazing language that allows developers to accomplish tasks quickly.\nStackStorm is an even-driven automation platform that enables developers and \noperations to take their Python scripts to the next level. </p>\n<p>First we will learn about the StackStorm platform and its building blocks:\nactions, workflows, sensors, triggers and rules. </p>\n<p>Second we will discuss how these building blocks are tied together using \nStackStorms event bus.</p>\n<p>Finally we will demonstrate some of the amazing capabilities we're able to \nrealize once a Python script is brought into the StackStorm ecosystem such as:\nautomatically invoking the script when an event occurs in an external system,\ninvoking the script via the API, or invoking the script via Slack.</p>\n<ul>\n<li>Outline</li>\n<li>About myself [1 minute]</li>\n<li>StackStorm intro [5 minutes]</li>\n<li>automation platform</li>\n<li>event driven</li>\n<li>everything is code</li>\n<li>everything available via the API</li>\n<li>everything available via the CLI</li>\n<li>StackStorm Actions [10 minutes]</li>\n<li>what is an action [1 minute]</li>\n<li>create a metadata file [3 minutes]</li>\n<li>convert our python script [5 minutes]</li>\n<li>run it via the CLI [1 minute]<ul>\n<li>show how st2 CLI writes curl commands for the API in debug mode</li>\n</ul>\n</li>\n<li>StackStorm ChatOps [10 minutes]</li>\n<li>what is ChatOps [1 minute]</li>\n<li>create a alias for our action [7 minutes]</li>\n<li>demo execution of the alias in Slack [2 minutes]</li>\n<li>\n<p>Questions [4 minutes]</p>\n</li>\n<li>\n<p>If there's time (if i get a 40 or 120 minute slot)</p>\n</li>\n<li>Packs<ul>\n<li>collection of artifacts (actions, aliases, workflows, rules, etc)</li>\n<li>github repo</li>\n<li>requirements.txt for python dependencies</li>\n</ul>\n</li>\n<li>Webhooks<ul>\n<li>create a webhook rule</li>\n<li>invoke the webhook via curl</li>\n</ul>\n</li>\n<li>Workflows<ul>\n<li>mistral</li>\n<li>composable actions</li>\n<li>passing data between actions</li>\n<li>handling errors</li>\n</ul>\n</li>\n<li>Datastore<ul>\n<li>read/write data</li>\n<li>secret keys</li>\n<li>reading in data in an action</li>\n<li>reading in data in a workflow</li>\n</ul>\n</li>\n</ul>",
    "speaker": 145,
    "cancelled": false,
    "proposal_base": 159,
    "section": 2
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 43,
  "fields": {
    "slot": null,
    "title": "An Only One Step Ahead Guide for Machine Learning Projects",
    "description": "There is a lot of hype around machine learning, but completing a project at work seems to be much harder than what online tutorials had advertised. In this talk, I will provide a few tips for different stages of a machine learning project like recognizing pitfalls, that I wished I knew when first navigating through my projects as a junior in the field.",
    "description_html": "<p>There is a lot of hype around machine learning, but completing a project at work seems to be much harder than what online tutorials had advertised. In this talk, I will provide a few tips for different stages of a machine learning project like recognizing pitfalls, that I wished I knew when first navigating through my projects as a junior in the field.</p>",
    "abstract": "## Abstract\r\n\r\nWhat does a data scientist\u2019s day look like? On the one hand, people say that a data scientist's day is 5% modeling and 95% cleaning data and other stuff. On the other hand, there are many more machine learning tutorials and blog posts on modeling than posts on the \"other stuff\" when I search online. There seems to be a lack of guidance for junior data scientists when they enter into the field who are trying to complete their first few projects. \r\n\r\nIn the last few years, I have worked on several data science projects like this, where the path to success is unclear and the journey is full of pitfalls. In this talk, I will provide practical tips on machine learning projects that I learned the hard way. I will give you 2-3 tips with examples in each stage of a machine learning project --- before, during, and after --- that will help junior data scientists or anyone working on a machine learning project navigate through the muddy data waters better.\r\n\r\n## Outline\r\n\r\nThere are a few stages of a machine learning (ML) project, and I will give a few tips for each.\r\n\r\n**Before ML** (7-8 minutes)\r\n\r\nWhat kind of questions should I ask to the most out of the preparation stage of a machine learning project? \r\n\r\n**Starting ML** (8-10 minutes)\r\n\r\nHow do I define success and how do I get there? What kind of model should I pick? What are some Python tools that can help me work through a project?\r\n\r\n**Pitfalls** (8-10 minutes)\r\n\r\nI will share examples and stories of pitalls I saw or fell into in my past projects that I wasn't aware of at the time.",
    "abstract_html": "<h2>Abstract</h2>\n<p>What does a data scientist\u2019s day look like? On the one hand, people say that a data scientist's day is 5% modeling and 95% cleaning data and other stuff. On the other hand, there are many more machine learning tutorials and blog posts on modeling than posts on the \"other stuff\" when I search online. There seems to be a lack of guidance for junior data scientists when they enter into the field who are trying to complete their first few projects. </p>\n<p>In the last few years, I have worked on several data science projects like this, where the path to success is unclear and the journey is full of pitfalls. In this talk, I will provide practical tips on machine learning projects that I learned the hard way. I will give you 2-3 tips with examples in each stage of a machine learning project --- before, during, and after --- that will help junior data scientists or anyone working on a machine learning project navigate through the muddy data waters better.</p>\n<h2>Outline</h2>\n<p>There are a few stages of a machine learning (ML) project, and I will give a few tips for each.</p>\n<p><strong>Before ML</strong> (7-8 minutes)</p>\n<p>What kind of questions should I ask to the most out of the preparation stage of a machine learning project? </p>\n<p><strong>Starting ML</strong> (8-10 minutes)</p>\n<p>How do I define success and how do I get there? What kind of model should I pick? What are some Python tools that can help me work through a project?</p>\n<p><strong>Pitfalls</strong> (8-10 minutes)</p>\n<p>I will share examples and stories of pitalls I saw or fell into in my past projects that I wasn't aware of at the time.</p>",
    "speaker": 107,
    "cancelled": false,
    "proposal_base": 134,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 45,
  "fields": {
    "slot": null,
    "title": "Reproducible Environments for Reproducible Results",
    "description": "Trustworthy results require reproducibility. Publishing code is necessary but not sufficient for complete reproducibility. Complex programs often depend on external code. This talk will introduce you to several ways to manage your software dependencies and data to pass reproducible software environments to peer-reviewers.",
    "description_html": "<p>Trustworthy results require reproducibility. Publishing code is necessary but not sufficient for complete reproducibility. Complex programs often depend on external code. This talk will introduce you to several ways to manage your software dependencies and data to pass reproducible software environments to peer-reviewers.</p>",
    "abstract": "* Why environmental reproducibility is important\r\n* Overview of best practices for environmental reproducibility (~3-4 min per topic)\r\n    - Dependency Management\r\n        + pip freeze > requirements.txt\r\n        + Pipfile.lock\r\n    - Containerization\r\n    - Automated Provisioning\r\n    - Environment management\r\n        + Pulpproject",
    "abstract_html": "<ul>\n<li>Why environmental reproducibility is important</li>\n<li>Overview of best practices for environmental reproducibility (~3-4 min per topic)<ul>\n<li>Dependency Management<ul>\n<li>pip freeze &gt; requirements.txt</li>\n<li>Pipfile.lock</li>\n</ul>\n</li>\n<li>Containerization</li>\n<li>Automated Provisioning</li>\n<li>Environment management<ul>\n<li>Pulpproject</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
    "speaker": 140,
    "cancelled": false,
    "proposal_base": 147,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 46,
  "fields": {
    "slot": null,
    "title": "Inside the Cheeseshop: How Python Packaging Works",
    "description": "This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.",
    "description_html": "<p>This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.</p>",
    "abstract": "Questions and confusion about the Python packaging ecosystem abound. What is this `setup.py` file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a `requirements.txt` or in `setup.py`? How do I just get my module up on PyPI? Wait, what is Warehouse?\r\n\r\nThis talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.\r\n\r\nThis talk is for any Pythonista that has been confused by Python Packaging (read: everyone).\r\n\r\nThis talk requires that the audience has just the slightest familiarity with how Python Packaging works -- that you need to upload your source code, that there are a few popular and familiar tools, and that they are all a little confusing. Attendees do not need to be publishers of Python Packages but likely will be people interested in publishing someday.\r\n\r\nAfter watching this talk, attendees should have a significant amount of their confusion about the Python packaging ecosystem resolved, and should be able to make informed, reasonable decisions when they want to publish a package (without having to be told step by step instructions, or given extremely opinionated advice).",
    "abstract_html": "<p>Questions and confusion about the Python packaging ecosystem abound. What is this <code>setup.py</code> file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a <code>requirements.txt</code> or in <code>setup.py</code>? How do I just get my module up on PyPI? Wait, what is Warehouse?</p>\n<p>This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.</p>\n<p>This talk is for any Pythonista that has been confused by Python Packaging (read: everyone).</p>\n<p>This talk requires that the audience has just the slightest familiarity with how Python Packaging works -- that you need to upload your source code, that there are a few popular and familiar tools, and that they are all a little confusing. Attendees do not need to be publishers of Python Packages but likely will be people interested in publishing someday.</p>\n<p>After watching this talk, attendees should have a significant amount of their confusion about the Python packaging ecosystem resolved, and should be able to make informed, reasonable decisions when they want to publish a package (without having to be told step by step instructions, or given extremely opinionated advice).</p>",
    "speaker": 84,
    "cancelled": false,
    "proposal_base": 78,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 47,
  "fields": {
    "slot": null,
    "title": "Go with the flow: Automating your workflows with Airflow",
    "description": "We all have workflows in our daily lives. From simple ones in our personal lives, to terribly complex ones in our daily work, we could all benefit from automating these workflows. Airflow is the mechanism with which we can do this. In this talk, we will explore what Airflow is, and how we can leverage it to automate some of the tedium out of our daily lives.",
    "description_html": "<p>We all have workflows in our daily lives. From simple ones in our personal lives, to terribly complex ones in our daily work, we could all benefit from automating these workflows. Airflow is the mechanism with which we can do this. In this talk, we will explore what Airflow is, and how we can leverage it to automate some of the tedium out of our daily lives.</p>",
    "abstract": "Apache Airflow is an open-source Python project that, in the words of Apache, \"is a platform to programmatically author, schedule and monitor workflows.\". In this talk, I will focus on the basics of Airflow: what is it, and what can it do for me? In a nutshell, Airflow is a library for workflow management. The most common uses of Airflow revolve around data pipelines and processing, e.g. ETL pipes, but in reality, it can be used for pretty much any workflow that has discrete steps which can be performed independently. In addition, the scheduling capabilities of Airflow provide a high powered replacement for cron tables. I will discuss how to set up workflows, connect to other systems, and leverage the automation power of Airflow. Concepts covered will include DAGs, Operators, and Hooks. Finally, I will share some gotchas that I have come across while setting up my own workflows.",
    "abstract_html": "<p>Apache Airflow is an open-source Python project that, in the words of Apache, \"is a platform to programmatically author, schedule and monitor workflows.\". In this talk, I will focus on the basics of Airflow: what is it, and what can it do for me? In a nutshell, Airflow is a library for workflow management. The most common uses of Airflow revolve around data pipelines and processing, e.g. ETL pipes, but in reality, it can be used for pretty much any workflow that has discrete steps which can be performed independently. In addition, the scheduling capabilities of Airflow provide a high powered replacement for cron tables. I will discuss how to set up workflows, connect to other systems, and leverage the automation power of Airflow. Concepts covered will include DAGs, Operators, and Hooks. Finally, I will share some gotchas that I have come across while setting up my own workflows.</p>",
    "speaker": 143,
    "cancelled": false,
    "proposal_base": 164,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 48,
  "fields": {
    "slot": null,
    "title": "pandas On Jupyter: Improving Your Data Analysis Workflow",
    "description": "Python, and more specifically, Jupyter Notebooks enable data analysis workflows to be reproducible without very much overhead. This talk will discuss how to use Jupyter Notebooks and the python ecosystem to incrementally improve the reproducibility, efficiency, and depth of your existing analysis workflow.",
    "description_html": "<p>Python, and more specifically, Jupyter Notebooks enable data analysis workflows to be reproducible without very much overhead. This talk will discuss how to use Jupyter Notebooks and the python ecosystem to incrementally improve the reproducibility, efficiency, and depth of your existing analysis workflow.</p>",
    "abstract": "The need to clean, manipulate, and visualize data is a skill that is increasingly in demand due to the abundance of data available. There are many methods of performing data analysis, each with its own benefits and drawbacks. Of the many features that can be used to evaluate a data analysis method, we will focus on ease of use and reproducibility.  \r\n\r\nIt is crucially important for data analysis to be reproducible from starting data. A reproducible workflow allows others to review your work and can help catch assumptions, bugs, and steps that are not transparent in the final result. Reproducibility improves the transparency of your analysis and therefore makes your results more resistant to misinterpretation.   \r\n\r\nPython and, more specifically, Jupyter Notebooks enable workflows to be reproducible with very little overhead. Due to these characteristics, Jupyter Notebooks are the current medium for most data science work.  \r\nOne of largest problems with switching to a reproducible workflow is amount of time you need to sink into converting to the new workflow. I will demonstrate how a data analysis workflow can be modified using python libraries and Jupyter Notebooks.",
    "abstract_html": "<p>The need to clean, manipulate, and visualize data is a skill that is increasingly in demand due to the abundance of data available. There are many methods of performing data analysis, each with its own benefits and drawbacks. Of the many features that can be used to evaluate a data analysis method, we will focus on ease of use and reproducibility.  </p>\n<p>It is crucially important for data analysis to be reproducible from starting data. A reproducible workflow allows others to review your work and can help catch assumptions, bugs, and steps that are not transparent in the final result. Reproducibility improves the transparency of your analysis and therefore makes your results more resistant to misinterpretation.   </p>\n<p>Python and, more specifically, Jupyter Notebooks enable workflows to be reproducible with very little overhead. Due to these characteristics, Jupyter Notebooks are the current medium for most data science work.<br />\nOne of largest problems with switching to a reproducible workflow is amount of time you need to sink into converting to the new workflow. I will demonstrate how a data analysis workflow can be modified using python libraries and Jupyter Notebooks.</p>",
    "speaker": 83,
    "cancelled": false,
    "proposal_base": 84,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 49,
  "fields": {
    "slot": null,
    "title": "Customizing Sphinx: Simple, Normal, and Hard",
    "description": "Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python\u2019s secret weapon. It\u2019s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.\r\n\r\nSphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. This talk takes a look at themes and extensions.",
    "description_html": "<p>Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python\u2019s secret weapon. It\u2019s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.</p>\n<p>Sphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. This talk takes a look at themes and extensions.</p>",
    "abstract": "Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python\u2019s secret weapon. It\u2019s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.\r\n\r\nSphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. With such a venerable software stack, Sphinx can be inscrutable when you paint outside the lines.\r\n\r\nThis talk gives Sphinx civilians confidence to go beyond simply using Sphinx, towards adapting Sphinx to their needs: configuration values, local CSS and templates, installing extensions and themes, writing a small extension with a directive, and testing that extension. We\u2019ll conclude with a roundup of challenges and benefits that come with diving into Sphinx.\r\n\r\nAs the talk provides shallow treatment of a wide topic list, follow-up and hands-on instruction will be given at an open space.",
    "abstract_html": "<p>Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python\u2019s secret weapon. It\u2019s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.</p>\n<p>Sphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. With such a venerable software stack, Sphinx can be inscrutable when you paint outside the lines.</p>\n<p>This talk gives Sphinx civilians confidence to go beyond simply using Sphinx, towards adapting Sphinx to their needs: configuration values, local CSS and templates, installing extensions and themes, writing a small extension with a directive, and testing that extension. We\u2019ll conclude with a roundup of challenges and benefits that come with diving into Sphinx.</p>\n<p>As the talk provides shallow treatment of a wide topic list, follow-up and hands-on instruction will be given at an open space.</p>",
    "speaker": 93,
    "cancelled": false,
    "proposal_base": 90,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 51,
  "fields": {
    "slot": null,
    "title": "Build GUIs with Python and Glade",
    "description": "Python is a great asset to have in a developer's toolkit of languages. Although considered a scripting language, Python can create graphical user interfaces (GUIs) for your applications. GUI controls can be laid out programmatically or organized using a rapid application development (RAD) tool such as Glade. Come see how to build GUIs with Python and Glade.",
    "description_html": "<p>Python is a great asset to have in a developer's toolkit of languages. Although considered a scripting language, Python can create graphical user interfaces (GUIs) for your applications. GUI controls can be laid out programmatically or organized using a rapid application development (RAD) tool such as Glade. Come see how to build GUIs with Python and Glade.</p>",
    "abstract": "Build GUIs with Python and Glade\r\n\r\nPython gets a lot of attention these days, but many still see it as a scripting language for command line applications. Or do they? A recent survey reveals approximately 25% of Python applications being developed include some form of graphical user interface (GUI). Seeing this statistic encouraged me to experiment with my own Python GUI projects. However I quickly learned that choosing to develop a Python GUI was just the first of many decisions that had to be made. This talk walks the audience through the many challenges one faces when building GUIs with Python.\r\n\r\nThe first step in building GUIs with Python is to consider the target platform. Although it may not be obvious up front, this choice may constrain decisions made later. Next one has to choose a version of Python because the target platform may have both Python2 and Python3. Where to code the selected Python version is the next choice. Developers are often passionate about their editors, but the target platform my dictate the editor choice. Next we have to decide on a GUI toolkit to utilize, since we won't be programming GUI widgets from scratch. Also we have to decide if we plan to layout the GUI widgets programatically, or use a rapid application development (RAD) tool such as Glade. And finally we have to consider how we'll deploy our Python-based GUI application into the field.\r\n\r\nThe presentation will conclude with code demonstrations using Glade to construct Python GUIs. Time will be allocated for the audience to ask questions about the coding examples presented, as well the thought process that led me to choose the software development tools used.",
    "abstract_html": "<p>Build GUIs with Python and Glade</p>\n<p>Python gets a lot of attention these days, but many still see it as a scripting language for command line applications. Or do they? A recent survey reveals approximately 25% of Python applications being developed include some form of graphical user interface (GUI). Seeing this statistic encouraged me to experiment with my own Python GUI projects. However I quickly learned that choosing to develop a Python GUI was just the first of many decisions that had to be made. This talk walks the audience through the many challenges one faces when building GUIs with Python.</p>\n<p>The first step in building GUIs with Python is to consider the target platform. Although it may not be obvious up front, this choice may constrain decisions made later. Next one has to choose a version of Python because the target platform may have both Python2 and Python3. Where to code the selected Python version is the next choice. Developers are often passionate about their editors, but the target platform my dictate the editor choice. Next we have to decide on a GUI toolkit to utilize, since we won't be programming GUI widgets from scratch. Also we have to decide if we plan to layout the GUI widgets programatically, or use a rapid application development (RAD) tool such as Glade. And finally we have to consider how we'll deploy our Python-based GUI application into the field.</p>\n<p>The presentation will conclude with code demonstrations using Glade to construct Python GUIs. Time will be allocated for the audience to ask questions about the coding examples presented, as well the thought process that led me to choose the software development tools used.</p>",
    "speaker": 121,
    "cancelled": false,
    "proposal_base": 125,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 52,
  "fields": {
    "slot": null,
    "title": "Penetration Testing The Dev Interview: Attacks to ace interviews and defenses to build better teams",
    "description": "The developer hiring process is vulnerable. Let\u2019s attack it!\r\n\r\nWe\u2019ll draw on both the computer security penetration testing toolkit and from lessons learned the hard way across my decade of startup hiring. We'll break down the typical developer interview process. Then, we'll use the lens of social engineering and cognitive bias to identify specific tactics for acing interviews.",
    "description_html": "<p>The developer hiring process is vulnerable. Let\u2019s attack it!</p>\n<p>We\u2019ll draw on both the computer security penetration testing toolkit and from lessons learned the hard way across my decade of startup hiring. We'll break down the typical developer interview process. Then, we'll use the lens of social engineering and cognitive bias to identify specific tactics for acing interviews.</p>",
    "abstract": "* Heuristics\r\n* Cognitive bias\r\n* Resume attacks\r\n* Phone screen attacks\r\n* Take-home test attacks\r\n* Resume defense\r\n* Phone screen defense\r\n* Take-home test defenses\r\n\r\nLearning: Attendees will leave armed with both a) tools to be a more effective interviewer and b) tools to presents their best self as a candidate.",
    "abstract_html": "<ul>\n<li>Heuristics</li>\n<li>Cognitive bias</li>\n<li>Resume attacks</li>\n<li>Phone screen attacks</li>\n<li>Take-home test attacks</li>\n<li>Resume defense</li>\n<li>Phone screen defense</li>\n<li>Take-home test defenses</li>\n</ul>\n<p>Learning: Attendees will leave armed with both a) tools to be a more effective interviewer and b) tools to presents their best self as a candidate.</p>",
    "speaker": 126,
    "cancelled": false,
    "proposal_base": 129,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 53,
  "fields": {
    "slot": null,
    "title": "You Can Do Deep Learning!",
    "description": "When I started learning web dev, I dove into building my first Rails app. I didn\u2019t know how it all worked, but after hours of hacking I had a blogging app running. I imagine many share a similar learning experience. Similarly, you don\u2019t need a PhD to do deep learning, you can get started with Python skills and open-source frameworks. It can be fun and rewarding, and inspire you to dive deeper.",
    "description_html": "<p>When I started learning web dev, I dove into building my first Rails app. I didn\u2019t know how it all worked, but after hours of hacking I had a blogging app running. I imagine many share a similar learning experience. Similarly, you don\u2019t need a PhD to do deep learning, you can get started with Python skills and open-source frameworks. It can be fun and rewarding, and inspire you to dive deeper.</p>",
    "abstract": "#### Building my first web app in Rails\r\n   * No degree in CS, I just jumped into it\r\n   * When I first got it to run, **it felt like magic**.\r\n      * Magic can be good!\r\n      * Magic helps you fall in love with the beauty of what you\u2019re doing\r\n   * Could be very similar with Django, another highly-opinionated web framework\r\n\r\n#### Encounter with fast.ai video--[building an image classifier with 10 lines of code](http://course.fast.ai/lessons/lesson1.html)\r\n   * It was like the first time I saw DHH's [original Rails demo](https://www.youtube.com/watch?v=Gzj723LkRJY)\r\n   * Learning from the top down lets you actually do something\r\n\r\n\r\n#### Empowering you to do deep learning--the tools you'll need\r\n   * Three basic things you need for making a deep learning model: data, model architecture, and training strategy/optimization\r\n   * Data\r\n      * Pytorch--torchvision has many popular datasets, including MNIST and CIFAR  \r\n   * Model architecture and weights\r\n      * Pytorch community has many pre-built architectures available\r\n   * Training\r\n      * the fast.ai framework encodes many best practices in training neural networks, as well as implementations of some cutting-edge research techniques that you get out-of-the-box to help improve your model's performance\r\n   * (Important to note)--there are other frameworks out there! For example, Keras also makes it easy to get your first neural network set up and trained. The space and tooling is moving so quickly right now that it's important not to get too attached to one specific framework\r\n\r\n#### Other software development skills you may need to leverage\r\n   * Running an AWS instance\r\n   * Googling error messages\r\n   * Reading documentation\r\n   * Reading the source\r\n   * Sometimes, just copy-pasting stuff from the internet and hoping it works!\r\n\r\n\r\nConclusion: The main point I want to make is that you don't need a PhD to get started in deep learning. It can be  fun to learn enough to do a simple project, like a cats vs. dogs image classifier (or hot dog/not hot dog like in Silicon Valley). And, if it happens to inspire something more in you, you can take the time to peel away at those layers of abstraction. But starting at a high level of abstraction lets you have the reward of actually running something.",
    "abstract_html": "<h4>Building my first web app in Rails</h4>\n<ul>\n<li>No degree in CS, I just jumped into it</li>\n<li>When I first got it to run, <strong>it felt like magic</strong>.<ul>\n<li>Magic can be good!</li>\n<li>Magic helps you fall in love with the beauty of what you\u2019re doing</li>\n</ul>\n</li>\n<li>Could be very similar with Django, another highly-opinionated web framework</li>\n</ul>\n<h4>Encounter with fast.ai video--<a href=\"http://course.fast.ai/lessons/lesson1.html\">building an image classifier with 10 lines of code</a></h4>\n<ul>\n<li>It was like the first time I saw DHH's <a href=\"https://www.youtube.com/watch?v=Gzj723LkRJY\">original Rails demo</a></li>\n<li>Learning from the top down lets you actually do something</li>\n</ul>\n<h4>Empowering you to do deep learning--the tools you'll need</h4>\n<ul>\n<li>Three basic things you need for making a deep learning model: data, model architecture, and training strategy/optimization</li>\n<li>Data<ul>\n<li>Pytorch--torchvision has many popular datasets, including MNIST and CIFAR  </li>\n</ul>\n</li>\n<li>Model architecture and weights<ul>\n<li>Pytorch community has many pre-built architectures available</li>\n</ul>\n</li>\n<li>Training<ul>\n<li>the fast.ai framework encodes many best practices in training neural networks, as well as implementations of some cutting-edge research techniques that you get out-of-the-box to help improve your model's performance</li>\n</ul>\n</li>\n<li>(Important to note)--there are other frameworks out there! For example, Keras also makes it easy to get your first neural network set up and trained. The space and tooling is moving so quickly right now that it's important not to get too attached to one specific framework</li>\n</ul>\n<h4>Other software development skills you may need to leverage</h4>\n<ul>\n<li>Running an AWS instance</li>\n<li>Googling error messages</li>\n<li>Reading documentation</li>\n<li>Reading the source</li>\n<li>Sometimes, just copy-pasting stuff from the internet and hoping it works!</li>\n</ul>\n<p>Conclusion: The main point I want to make is that you don't need a PhD to get started in deep learning. It can be  fun to learn enough to do a simple project, like a cats vs. dogs image classifier (or hot dog/not hot dog like in Silicon Valley). And, if it happens to inspire something more in you, you can take the time to peel away at those layers of abstraction. But starting at a high level of abstraction lets you have the reward of actually running something.</p>",
    "speaker": 148,
    "cancelled": false,
    "proposal_base": 166,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 54,
  "fields": {
    "slot": null,
    "title": "Community - From the Inside Out",
    "description": "_I came for the language, but I stayed for the Community_ --Brett Cannon, Pycon 2014\r\n\r\nWhy? What draws us to community?\r\nWhat makes a great Community?\r\nHow do we contribute?\r\n\r\nI'll share some insights, some science, and some surprisingly\r\nbroad principles. I'll share what contributes, what parts are\r\nsimilar to coding practices, and some ways you can contribute\r\nto a great Community feeling.",
    "description_html": "<p><em>I came for the language, but I stayed for the Community</em> --Brett Cannon, Pycon 2014</p>\n<p>Why? What draws us to community?\nWhat makes a great Community?\nHow do we contribute?</p>\n<p>I'll share some insights, some science, and some surprisingly\nbroad principles. I'll share what contributes, what parts are\nsimilar to coding practices, and some ways you can contribute\nto a great Community feeling.</p>",
    "abstract": "# Community - From the Inside out\r\n##  towards an attractive Community API\r\n\r\n- Everybody is drawn to Community?\r\n  - list of talks, quotes, other communities which mirrored this;\r\n\r\n- Why is that?\r\n  - evolution\r\n    - benefits & shortcomings (community & congintion basics)\r\n    - mirrored in biological structures (Panksepp)\r\n    - the architecture of biology\r\n    - cognition and feedback structures;\r\n    - the interesting structures: play, joy/sadness, exploration\r\n    - dynamic modulation\r\n  - how widely favored (evolutionarily) is it?\r\n    - bees, rats, chimps, us, ... (examples)\r\n\r\n- Why - a functional description\r\n  - the limits of cognition, and the benefit of social sharing\r\n    - Edelsons's checker shadow demonstration\r\n    - Eagleman on more complex functions\r\n    - how personal, encapsulated our experiences are\r\n  - how the benefit works\r\n    - code reviews\r\n    - scientific method\r\n    - work teams\r\n    - open-source communities\r\n    - open societies / governments\r\n\r\n- Skills:\r\n  - encapsulation and structure in software (hey! it's like cognition!)\r\n  - the parallels for Community interaction (and for architectural guidance too);\r\n  - fundamental data structures;\r\n  - explicitly aware == explicit benefits\r\n    - the core API rule (encapsulation)\r\n    - personal data structures\r\n    - data structures vs. interfaces\r\n    - channels (modes) of communication\r\n      - their uses, their limits\r\n        - how to switch channels\r\n  - putting into practice in community\r\n\r\n- Where to go from here\r\n\r\n- Q/A",
    "abstract_html": "<h1>Community - From the Inside out</h1>\n<h2>towards an attractive Community API</h2>\n<ul>\n<li>Everybody is drawn to Community?</li>\n<li>\n<p>list of talks, quotes, other communities which mirrored this;</p>\n</li>\n<li>\n<p>Why is that?</p>\n</li>\n<li>evolution<ul>\n<li>benefits &amp; shortcomings (community &amp; congintion basics)</li>\n<li>mirrored in biological structures (Panksepp)</li>\n<li>the architecture of biology</li>\n<li>cognition and feedback structures;</li>\n<li>the interesting structures: play, joy/sadness, exploration</li>\n<li>dynamic modulation</li>\n</ul>\n</li>\n<li>\n<p>how widely favored (evolutionarily) is it?</p>\n<ul>\n<li>bees, rats, chimps, us, ... (examples)</li>\n</ul>\n</li>\n<li>\n<p>Why - a functional description</p>\n</li>\n<li>the limits of cognition, and the benefit of social sharing<ul>\n<li>Edelsons's checker shadow demonstration</li>\n<li>Eagleman on more complex functions</li>\n<li>how personal, encapsulated our experiences are</li>\n</ul>\n</li>\n<li>\n<p>how the benefit works</p>\n<ul>\n<li>code reviews</li>\n<li>scientific method</li>\n<li>work teams</li>\n<li>open-source communities</li>\n<li>open societies / governments</li>\n</ul>\n</li>\n<li>\n<p>Skills:</p>\n</li>\n<li>encapsulation and structure in software (hey! it's like cognition!)</li>\n<li>the parallels for Community interaction (and for architectural guidance too);</li>\n<li>fundamental data structures;</li>\n<li>explicitly aware == explicit benefits<ul>\n<li>the core API rule (encapsulation)</li>\n<li>personal data structures</li>\n<li>data structures vs. interfaces</li>\n<li>channels (modes) of communication</li>\n<li>their uses, their limits<ul>\n<li>how to switch channels</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>putting into practice in community</p>\n</li>\n<li>\n<p>Where to go from here</p>\n</li>\n<li>\n<p>Q/A</p>\n</li>\n</ul>",
    "speaker": 150,
    "cancelled": false,
    "proposal_base": 168,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 55,
  "fields": {
    "slot": null,
    "title": "CSS as a Service: Maintaining Style",
    "description": "We often build multiple websites and applications that share the same styles across multiple code bases (style guides/pattern libraries). Maintaining these styles becomes quite a task, and causes increasing frustration overtime. Fortunately it doesn\u2019t have to be this way, and in this talk for designers and engineers, we\u2019ll discuss how.",
    "description_html": "<p>We often build multiple websites and applications that share the same styles across multiple code bases (style guides/pattern libraries). Maintaining these styles becomes quite a task, and causes increasing frustration overtime. Fortunately it doesn\u2019t have to be this way, and in this talk for designers and engineers, we\u2019ll discuss how.</p>",
    "abstract": "We often build multiple websites and applications that share the same styles across multiple code bases (style guides/pattern libraries). Maintaining these styles becomes quite a task, and causes increasing frustration overtime. Fortunately it doesn\u2019t have to be this way.\r\n\r\nWithin this talk we\u2019ll cover a service-oriented architecture approach to writing HTML and CSS, including Sass, and keeping our code modular and performant. Geared towards designers and front-end developers, we\u2019ll discuss at how to best structure and write front-end code for maintainability and reuse, as well as how to properly package these styles to be used within different development environments. Consistency shouldn\u2019t take a back seat to maintainability, and this talk covers how to have the best of both worlds.",
    "abstract_html": "<p>We often build multiple websites and applications that share the same styles across multiple code bases (style guides/pattern libraries). Maintaining these styles becomes quite a task, and causes increasing frustration overtime. Fortunately it doesn\u2019t have to be this way.</p>\n<p>Within this talk we\u2019ll cover a service-oriented architecture approach to writing HTML and CSS, including Sass, and keeping our code modular and performant. Geared towards designers and front-end developers, we\u2019ll discuss at how to best structure and write front-end code for maintainability and reuse, as well as how to properly package these styles to be used within different development environments. Consistency shouldn\u2019t take a back seat to maintainability, and this talk covers how to have the best of both worlds.</p>",
    "speaker": 59,
    "cancelled": false,
    "proposal_base": 62,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 56,
  "fields": {
    "slot": null,
    "title": "Serverless Anywhere, including On-Prem",
    "description": "Cloud functions -- or \"Serverless\" -- allows you to put functions into play without the typical deployment effort. While the major cloud providers have their own FaaS, OpenWhisk -- an open source solution -- allows you to run function on any cloud, including on premises. Come see how you can run Python functions on your own terms.",
    "description_html": "<p>Cloud functions -- or \"Serverless\" -- allows you to put functions into play without the typical deployment effort. While the major cloud providers have their own FaaS, OpenWhisk -- an open source solution -- allows you to run function on any cloud, including on premises. Come see how you can run Python functions on your own terms.</p>",
    "abstract": "Serverless computing -- they\u2019re functions, but that doesn\u2019t sound as provocative -- is here to stay. Some people even think it will take over and be the future of computing. But there\u2019s one problem: Vendor lock in.\r\n\r\nAzure Functions, AWS Lambdas, Google Cloud Functions \u2026 they will all meet your needs, but do you really want to put all your proverbial computing eggs into one vendor basket? Also; what if you just want to learn (\u201cplay around with\u201d) functions without spending money?\r\n\r\nEnter OpenWhisk, the open source serverless (\u201cTHEY\u2019RE FUNCTIONS!\u201d) computing engine that runs anywhere: Azure, Amazon, Google, your hosting platform of choice, or in-house. Or everywhere. Your choice, you decide, you are in control.\r\n\r\nThis session will demonstrate how one code base -- no matter the programming language! -- can run on any platform, avoiding vendor lock in and putting you back in control of your cloud native development.",
    "abstract_html": "<p>Serverless computing -- they\u2019re functions, but that doesn\u2019t sound as provocative -- is here to stay. Some people even think it will take over and be the future of computing. But there\u2019s one problem: Vendor lock in.</p>\n<p>Azure Functions, AWS Lambdas, Google Cloud Functions \u2026 they will all meet your needs, but do you really want to put all your proverbial computing eggs into one vendor basket? Also; what if you just want to learn (\u201cplay around with\u201d) functions without spending money?</p>\n<p>Enter OpenWhisk, the open source serverless (\u201cTHEY\u2019RE FUNCTIONS!\u201d) computing engine that runs anywhere: Azure, Amazon, Google, your hosting platform of choice, or in-house. Or everywhere. Your choice, you decide, you are in control.</p>\n<p>This session will demonstrate how one code base -- no matter the programming language! -- can run on any platform, avoiding vendor lock in and putting you back in control of your cloud native development.</p>",
    "speaker": 58,
    "cancelled": false,
    "proposal_base": 143,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 57,
  "fields": {
    "slot": null,
    "title": "Playtime in the Dunders: Mastering Python with Misfit Objects",
    "description": "In this talk, we will engage in imaginative play with the python language by deliberately misusing the python special methods (dunders) to construct objects with very odd behavior. While such objects may be unsuitable for any \"serious\" programming, having fun observing their behavior can help to provide a much richer understanding of the python language and interpreter.",
    "description_html": "<p>In this talk, we will engage in imaginative play with the python language by deliberately misusing the python special methods (dunders) to construct objects with very odd behavior. While such objects may be unsuitable for any \"serious\" programming, having fun observing their behavior can help to provide a much richer understanding of the python language and interpreter.</p>",
    "abstract": "Gaining a high degree of expertise with a programming language often requires a deeper understanding than is typically gained through normal work environments following best practices. To become a true expert, one needs to understand the consequences of not following these practices, and to be able to develop new techniques to best handle ever changing requirements and environments. While expertise can be developed through hard work and painful failures, I suggest that it is more fun to develop expertise in the same manner that small children learn - through free play and silly experimentation.\r\n\r\nThis presentation will go through a few examples of using the python [special methods](https://docs.python.org/3/reference/datamodel.html#special-method-names) (dunders) to playfully construct oddly behaving objects and use them to better understand how specific components of the python language and interpreter really work. While this presentation is far to short to foster language expertise on its own, I hope that it may serve as inspiration to perform your own experiments with special methods, make your own strange objects, and work to understand why they behave in the manner that they do.",
    "abstract_html": "<p>Gaining a high degree of expertise with a programming language often requires a deeper understanding than is typically gained through normal work environments following best practices. To become a true expert, one needs to understand the consequences of not following these practices, and to be able to develop new techniques to best handle ever changing requirements and environments. While expertise can be developed through hard work and painful failures, I suggest that it is more fun to develop expertise in the same manner that small children learn - through free play and silly experimentation.</p>\n<p>This presentation will go through a few examples of using the python <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">special methods</a> (dunders) to playfully construct oddly behaving objects and use them to better understand how specific components of the python language and interpreter really work. While this presentation is far to short to foster language expertise on its own, I hope that it may serve as inspiration to perform your own experiments with special methods, make your own strange objects, and work to understand why they behave in the manner that they do.</p>",
    "speaker": 85,
    "cancelled": false,
    "proposal_base": 80,
    "section": 1
  }
},
{
  "model": "symposion_schedule.presentation",
  "pk": 58,
  "fields": {
    "slot": null,
    "title": "Large-Scale Recommendation System with Python and Spark",
    "description": "New product discovery is an established activity within brick-and-mortar grocery stores, but is still ripe for experimentation within an online setting.  In this talk, we discuss a customer-level product recommendation system we developed for the Kroger Company, using Python, Apache Spark, and Apache Airflow.",
    "description_html": "<p>New product discovery is an established activity within brick-and-mortar grocery stores, but is still ripe for experimentation within an online setting.  In this talk, we discuss a customer-level product recommendation system we developed for the Kroger Company, using Python, Apache Spark, and Apache Airflow.</p>",
    "abstract": "# Abstract\r\nWe will briefly cover the Kroger Company and its digital properties, along with its current recommendation systems and need for a new one.  We will then move into a deep dive of the system we developed, covering the Python APIs for large-scale data processing tool Spark, and the underlying Hadoop Distributed File System (HDFS) - focusing on how we utilized each in our implementation.  We\u2019ll also discuss process scheduling and coordination via Apache Airflow, along with its Python API and use of Python eggs.  Finally, we will show the recommendation system in action, and discuss plans for testing and improvement. \r\n\r\nTalk will be organized as follows:\r\n\r\n## Intro - Context Setting (5 min)\r\n\r\n* What is Kroger?  \r\n   * What is 84.51?  \r\n      * What is Digital Personalization at 84.51?\r\n\r\n* Landscape: Kroger\u2019s digital properties \r\n   * Typically use Retention-focused Recommendation Systems \r\n      * These tend to work extremely well with grocery\u2019s cyclic purchase cycles\r\n   * Need for Acquisition-based Recommendation System\r\n\r\n## Body - Technical Deep Dive (20 min)\r\n### New Product Recommender - Ensemble Recommendation System\r\n\r\n### Part 0:\r\n* Hadoop & Spark, and their Python API\r\n\r\n### Part 1: Collaborative Filtering \r\n* Overview \r\n   * Training (PySpark)\r\n   * Implementation (PySpark)\r\n      * Roadblocks\r\n\r\n### Part 2: Regularized Regression\r\n* Overview\r\n   * Training \r\n   * Implementation (PySpark)\r\n\r\n### Part 3: Process Scheduling\r\n   * Overview of Airflow\r\n      * Directed Acyclic Graphs\r\n      * Python directive script layout\r\n      * Python Eggs\r\n\r\n### Part 4: Live view of system on kroger.com\r\n\r\n## Conclusion (5 min)\r\n   * Next Steps - Testing",
    "abstract_html": "<h1>Abstract</h1>\n<p>We will briefly cover the Kroger Company and its digital properties, along with its current recommendation systems and need for a new one.  We will then move into a deep dive of the system we developed, covering the Python APIs for large-scale data processing tool Spark, and the underlying Hadoop Distributed File System (HDFS) - focusing on how we utilized each in our implementation.  We\u2019ll also discuss process scheduling and coordination via Apache Airflow, along with its Python API and use of Python eggs.  Finally, we will show the recommendation system in action, and discuss plans for testing and improvement. </p>\n<p>Talk will be organized as follows:</p>\n<h2>Intro - Context Setting (5 min)</h2>\n<ul>\n<li>What is Kroger?  </li>\n<li>\n<p>What is 84.51?  </p>\n<ul>\n<li>What is Digital Personalization at 84.51?</li>\n</ul>\n</li>\n<li>\n<p>Landscape: Kroger\u2019s digital properties </p>\n</li>\n<li>Typically use Retention-focused Recommendation Systems <ul>\n<li>These tend to work extremely well with grocery\u2019s cyclic purchase cycles</li>\n</ul>\n</li>\n<li>Need for Acquisition-based Recommendation System</li>\n</ul>\n<h2>Body - Technical Deep Dive (20 min)</h2>\n<h3>New Product Recommender - Ensemble Recommendation System</h3>\n<h3>Part 0:</h3>\n<ul>\n<li>Hadoop &amp; Spark, and their Python API</li>\n</ul>\n<h3>Part 1: Collaborative Filtering</h3>\n<ul>\n<li>Overview </li>\n<li>Training (PySpark)</li>\n<li>Implementation (PySpark)<ul>\n<li>Roadblocks</li>\n</ul>\n</li>\n</ul>\n<h3>Part 2: Regularized Regression</h3>\n<ul>\n<li>Overview</li>\n<li>Training </li>\n<li>Implementation (PySpark)</li>\n</ul>\n<h3>Part 3: Process Scheduling</h3>\n<ul>\n<li>Overview of Airflow<ul>\n<li>Directed Acyclic Graphs</li>\n<li>Python directive script layout</li>\n<li>Python Eggs</li>\n</ul>\n</li>\n</ul>\n<h3>Part 4: Live view of system on kroger.com</h3>\n<h2>Conclusion (5 min)</h2>\n<ul>\n<li>Next Steps - Testing</li>\n</ul>",
    "speaker": 80,
    "cancelled": false,
    "proposal_base": 79,
    "section": 1
  }
},
{
  "model": "symposion_schedule.session",
  "pk": 2,
  "fields": {
    "day": 1,
    "slots": [
      8,
      9,
      4,
      1,
      10,
      3,
      2
    ]
  }
},
{
  "model": "symposion_schedule.session",
  "pk": 3,
  "fields": {
    "day": 2,
    "slots": [
      5,
      7,
      6
    ]
  }
}
]
